<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/hexo/posts/d87f7e0c/"/>
      <url>/hexo/posts/d87f7e0c/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql全文索引</title>
      <link href="/hexo/posts/b184cf1a/"/>
      <url>/hexo/posts/b184cf1a/</url>
      
        <content type="html"><![CDATA[<h2 id="mysql-全文索引"><a href="#mysql-全文索引" class="headerlink" title="mysql 全文索引"></a>mysql 全文索引</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/yangyxd/p/15252691.html">博客园全文索引</a></p><p><a href="https://mysql.net.cn/doc/refman/8.0/en/fulltext-search.html">mysql8文档,全文搜索功能</a></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>项目中需要使用分词搜索, 数据量不大,并且使用场景比较简单, 研究了 es   meilisearch  之后决定使用mysql自带的fulltext索引进行全文搜索, 其实在写这篇文章时,需求使用 like 也能满足。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>全文索引是为了解决需要基于相似度的查询，而不是精确数值比较。</p><blockquote><p>虽然使用 <code>like + %</code> 也可以实现模糊匹配，但是对于大量的文本数据检索，是不可想象的。全文索引在大量的数据面前，能比 <code>like</code> 快 N 倍，速度不是一个数量级。</p></blockquote><h3 id="版本支持"><a href="#版本支持" class="headerlink" title="版本支持"></a>版本支持</h3><ol><li><code>MySQL 5.6</code> 以前的版本，只有 <code>MyISAM</code> 存储引擎支持全文索引</li><li><code>MySQL 5.6</code> 及以后的版本，<code>MyISAM</code> 和 <code>InnoDB</code> 存储引擎均支持全文索引</li><li><code>MySQL 5.7.6</code> 中，提供了支持中文、日文和韩文（CJK）的内置全文 <code>ngram 解析器</code>，以及用于日文的可安装 <code>MeCab</code> 全文解析器插件</li><li>全文索引只能用于<code>InnoDB</code>或<code>MyISAM</code>表，只能为<code>CHAR</code>、<code>VARCHAR</code>、<code>TEXT</code>列创建</li><li>对于大型数据集，将数据加载到没有全文索引的表中然后创建索引要比将数据加载到具有现有全文索引的表中快得多</li><li><code>RDS MySQL 5.6</code> 虽然也支持中文全文检索，但存在BUG</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>1）表中该字段中的数据量庞大<br>2）经常被检索，经常出现在where子句中的字段<br>3）经常被DML操作的字段不建议添加索引</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点:"></a>优点:</h3><p>1）大大提高检索数据的性能效率<br>2）在表连接的连接条件，可以加速表与表直接的相连<br>3）在分组和排序字句进行数据检索,可以减少查询时间中 分组 和 排序时所消耗的时间(数据库的记录会重新排序)</p><h3 id="限制与缺点"><a href="#限制与缺点" class="headerlink" title="限制与缺点"></a>限制与缺点</h3><ul><li><p>创建与维护索引会消耗时间，并随着数据量的增加而增加</p></li><li><p><strong>导致磁盘资源的大量占用</strong>。全文索引本身就是一个利用磁盘空间换取性能的方法。全文索引大的原因是，按照某种语言来进行分词</p></li><li><p>全文索引创建速度慢，而且对有全文索引的各种数据修改操作也慢</p></li><li><p>使用全文索引并不是对应用透明的。如果要想利用全文索引，必须修改查询语句。原有的查询语句是不可能利用全文索引的，需要改成全文索引规定的语法</p></li><li><p>不区分大小写</p></li><li><blockquote><p>分区表不支持全文搜索</p></blockquote></li><li><p>由多列组合而成的全文检索的索引必须使用相同的字符集与排序规则</p></li><li><p><strong>全文索引可能存在精度问题</strong>，即全文索引找到的数据，可能和<code>like</code>到的不一致</p></li><li><p>MATCH()函数中的列必须与FULLTEXT索引中定义的列完全一致，除非是在MyISAM表中使用IN BOOLEAN MODE模式的全文搜索（可在没有建立索引的列执行搜索，但速度很慢）</p></li><li><p>单列分别建立全文索引时，多列模糊查询时不生效</p></li><li><p>不同表的全文索引不能放在一起查询，可以两个语句中加上OR</p></li></ul><h2 id="操作全文索引"><a href="#操作全文索引" class="headerlink" title="操作全文索引"></a>操作全文索引</h2><h4 id="查询索引用到的配置属性"><a href="#查询索引用到的配置属性" class="headerlink" title="查询索引用到的配置属性"></a>查询索引用到的配置属性</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> VARIABLES <span class="token operator">like</span> <span class="token string">'%ft%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>全文索引的相关参数都无法进行动态修改，必须通过修改 MySQL 的配置文件来完成。修改最小搜索长度的值为 1，首先打开 MySQL 的配置文件 &#x2F;etc&#x2F;my.cnf，在 [mysqld] 的下面追加以下内容：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 配置内容可以参看 官方文档配置项说明</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>innodb_ft_min_token_size <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 最短的索引字符串，默认值为4</span>ft_min_word_len <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>修改完成后需要重启mysql服务, 并且已经创建的索引需要重建</strong></p><h4 id="全局停用词"><a href="#全局停用词" class="headerlink" title="全局停用词"></a>全局停用词</h4><p><a href="https://mysql.net.cn/doc/refman/8.0/en/fulltext-stopwords.html">停用词</a></p><p>mysql 自带停用词表 <code>INFORMATION_SCHEMA.INNODB_FT_DEFAULT_STOPWORD</code></p><pre><code>-- 配置自己的停用词表--  全文停用词, 可以指定单词不建立索引,  一般 用于 the  this 等无意义词,CREATE TABLE my_stopwords(value VARCHAR(30)) ENGINE = INNODB;INSERT INTO my_stopwords(value) VALUES (&#39;Ishmael&#39;);SET GLOBAL innodb_ft_server_stopword_table = &#39;test/my_stopwords&#39;;-- 修改停用词之后需要更新索引  删除后重建</code></pre><h4 id="索引增删"><a href="#索引增删" class="headerlink" title="索引增删"></a>索引增删</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> doc<span class="token keyword">ADD</span> FULLTEXT <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>docIndex<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">WITH</span> PARSER <span class="token punctuation">`</span>ngram<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 删除缩影</span><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> docIndex <span class="token keyword">ON</span> doc<span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span>  <span class="token punctuation">`</span>doc<span class="token punctuation">`</span><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token punctuation">`</span>docIndex<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="索引查询使用"><a href="#索引查询使用" class="headerlink" title="索引查询使用"></a>索引查询使用</h4><blockquote><p>函数 : MATCH()against()</p></blockquote><ul><li><h3 id="自然语言的全文检索"><a href="#自然语言的全文检索" class="headerlink" title="自然语言的全文检索"></a>自然语言的全文检索</h3></li></ul><p>默认方式</p><p>​自然语言搜索引擎将计算每一个文档对象和查询的相关度。这里，相关度是基于匹配的关键词的个数，以及关键词在文档中出现的次数。在整个索引中出现次数越少的词语，匹配时的相关度就越高。相反，非常常见的单词将不会被搜索，如果一个词语的在超过 50% 的记录中都出现了，那么自然语言的搜索将不会搜索这类词语。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询时创建   查询时  需要将添加索引的字段 按照顺序全部写在 match 后面  否则索引不生效</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>lc_law_doc<span class="token punctuation">`</span> <span class="token keyword">where</span>  <span class="token keyword">MATCH</span><span class="token punctuation">(</span><span class="token punctuation">`</span>law_name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>law_desc<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>ver_desc<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span>against<span class="token punctuation">(</span><span class="token string">'"我的文档"'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">""</span> 表示该单词不再分割<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="扩展用法"><a href="#扩展用法" class="headerlink" title="扩展用法"></a>扩展用法</h5></li></ul><p>格式<br>select 字段 from 表名 where match(字段) against(‘搜索字符串’ with query expansion);</p><p>机制：<br>首先，进行一个基本的全文本搜索，找出与搜索条件匹配的所有行<br>其次，Mysql检查这些匹配行并选择所有有用的词<br>再次，Mysql再次进行全文本搜索，这次不仅使用原来的条件，而且还使用所有有用的词</p><ul><li><h5 id="布尔搜索"><a href="#布尔搜索" class="headerlink" title="布尔搜索"></a>布尔搜索</h5></li></ul><p>在布尔搜索中，我们可以在查询中自定义某个被搜索的词语的相关性，当编写一个布尔搜索查询时，可以通过一些前缀修饰符来定制搜索。</p><ul><li>空(也就是默认状况)，表示可选的，包含该词的顺序较高</li><li><code>+</code> 表示必须包含</li><li><code>-</code> 表示必须排除</li><li>“&gt;” 表示出现该单词时增加相关性，查询的结果靠前</li><li>“&lt;” 表示出现该单词时降低相关性，查询的结果靠后</li><li><code>*</code> 表示通配符，只能接在词后面</li><li><code>~</code> 允许出现该单词，但是出现时相关性为负，表示拥有该字会下降相关性，但不像「-」将之排除，只是排在较后面</li><li><strong>“”</strong> 双引号表示短语，表示要彻底相符，不可拆字效果，类同于 like ‘%keyword%’</li><li><code>()</code> 经过括号来使用字条件:</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>doc<span class="token punctuation">`</span> <span class="token keyword">where</span>  <span class="token keyword">MATCH</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span>against<span class="token punctuation">(</span><span class="token string">'+法律法规 +test'</span> <span class="token operator">IN</span> <span class="token keyword">BOOLEAN</span> MODE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 全文索引 </tag>
            
            <tag> 全文搜索 </tag>
            
            <tag> waou </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024-07-29vue-props传值</title>
      <link href="/hexo/posts/3436e1c5/"/>
      <url>/hexo/posts/3436e1c5/</url>
      
        <content type="html"><![CDATA[<h2 id="vue-props-传值"><a href="#vue-props-传值" class="headerlink" title="vue props 传值"></a>vue props 传值</h2><p><a href="https://blog.csdn.net/MtangEr/article/details/135084222">https://blog.csdn.net/MtangEr/article/details/135084222</a></p><p>Vue 官方文档中对于 Prop 的定义：</p><p>Prop 是你可以在组件上注册的一些自定义属性。当一个值传递给一个 props<br>属性的时候，它就变成了那个组件实例的一个属性。为了给子组件传递数据，我们需要在该组件上使用 v-bind 指令绑定需要传递的数据。</p><p>由此可见，Prop 是一种传递数据的机制，父组件通过 Prop 向子组件传递数据，子组件通过 Props 接收父组件传递过来的数据，这些数据被封装成一个个解构体形式的对象，不能直接进行修改。这样做的好处是保证了单向数据流，即只有父组件能够更新 Prop，然后数据会自动流向子组件，从而避免了数据的混乱与不可预测性。</p><p>如果我们在子组件中直接修改了父级传递 prop1 的值，那么运行时就会发生警告和错误。控制台会有如下提示</p><p><img src="/hexo/images/2024-07-29vue-props%E4%BC%A0%E5%80%BC/39414f0ea0a88db298930c05591ff874.png" alt="img"></p><p>这个警告提醒我们不要直接修改 Prop 的值，因为这样会导致数据的不稳定性和意外行为。Vue 提倡数据的单向流动，所有的数据更新都应该由父组件驱动，所以子组件不能直接修改父组件传递过来的 Prop 值。</p><p>那么我们应该怎么做呢？有几个可以解决这个问题的方法：</p><ul><li><p>使用事件触发机制</p></li><li><p>使用计算属性</p></li></ul><h3 id="方法一-使用事件触发机制"><a href="#方法一-使用事件触发机制" class="headerlink" title="方法一:使用事件触发机制"></a>方法一:使用事件触发机制</h3><pre><code>    watch: &#123;      value(value) &#123; //value 即为props 传值        this.innerValue =  value      &#125;    &#125;,              &lt;a-tree-select      v-model=&quot;innerValue&quot;      @change=&quot;handleChange&quot;    /&gt;          handleChange(values) &#123;        this.$emit(&#39;input&#39;, values)      &#125;,    </code></pre><h3 id="方法二-使用计算属性"><a href="#方法二-使用计算属性" class="headerlink" title="方法二:使用计算属性"></a>方法二:使用计算属性</h3><pre><code>  computed: &#123;      innerValue:        &#123;          get() &#123;            console.log(this.value+&#39;进入啊&#39;)            return this.value          &#125;, set(value) &#123;            console.log(value)            this.$emit(&#39;input&#39;, value)          &#125;        &#125;    &#125;,</code></pre><h3 id="方法三-后记"><a href="#方法三-后记" class="headerlink" title="方法三:后记"></a>方法三:后记</h3><pre><code>  data() &#123;      return &#123;        //此处写法一定情况下可以实现,        // 如果子组件先初始化, 父组件再传值, 就会发生值读取不到,        // 也就是这里的读取是一次性读取,运行到了直接执行,如果执行时没有值,那么父级的传值就丢了        // innerValue: this.value,      &#125;    &#125;,      此种读取value方式也要配合 方法一的时间触发方式,将值写回父级组件  </code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><ul><li>watch的问题</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//子组件初始化时, 获取监听的props属性,</span>watch<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    qparam<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//当 watch 一个变量的时候，初始化时并不会执行你需要在created的时候手动调用一次。添加immediate属性，这样初始化的时候也会触发</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queryParam <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>qparam      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly 编辑md常用标签</title>
      <link href="/hexo/posts/ebba4e5e/"/>
      <url>/hexo/posts/ebba4e5e/</url>
      
        <content type="html"><![CDATA[<h3 id="md常用标签"><a href="#md常用标签" class="headerlink" title="md常用标签"></a>md常用标签</h3><blockquote><p>md的标签不够丰富,支持样式有限,在这里记录一些常用md标签,以及标签的扩展插件</p></blockquote><p><em>hexo tag 支持自定义标签扩展</em></p><h4 id="md自带标签"><a href="#md自带标签" class="headerlink" title="md自带标签"></a>md自带标签</h4><h5 id="重点显示"><a href="#重点显示" class="headerlink" title="重点显示"></a>重点显示</h5><p><code>== ==</code>    <em>butterfly 不支持 或则 hexo 不支持</em></p><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><p><code>*内容*</code>  <em>内容</em>       <code>_你好_</code>  <em>你好</em></p><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5><p><code>**内容**</code>     <strong>加粗</strong>      <code>__你好__</code>  <strong>你好</strong></p><h5 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h5><p><code>****</code></p><hr><p><code>-----</code></p><hr><h4 id="hexo标签"><a href="#hexo标签" class="headerlink" title="hexo标签"></a>hexo标签</h4><p><em>hexo标签 迁移主题也不影响其使用</em></p><h5 id="路径引用"><a href="#路径引用" class="headerlink" title="路径引用"></a>路径引用</h5><h4 id="butterfly自带标签"><a href="#butterfly自带标签" class="headerlink" title="butterfly自带标签"></a>butterfly自带标签</h4><p><em>只能在butterfly中使用的标签, 当然 迁移主题时,可以利用hexo tag机制 进行新标签的注册</em></p><p><a href="https://fe32.top/articles/0xiipgum/">https://fe32.top/articles/0xiipgum/</a> 参考</p><h4 id="插件标签"><a href="#插件标签" class="headerlink" title="插件标签"></a>插件标签</h4><p><em>第三方引入的插件</em></p><h6 id="Hexo-admonition"><a href="#Hexo-admonition" class="headerlink" title="Hexo-admonition"></a>Hexo-admonition</h6><blockquote><p>主要是一些文本框的美化</p></blockquote><p><a href="https://github.com/lxl80/hexo-admonition">https://github.com/lxl80/hexo-admonition</a></p><h3 id="md编辑器"><a href="#md编辑器" class="headerlink" title="md编辑器"></a>md编辑器</h3><h4 id="typory"><a href="#typory" class="headerlink" title="typory"></a>typory</h4><h4 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h4><h3 id="博客图片"><a href="#博客图片" class="headerlink" title="博客图片"></a>博客图片</h3><p>图片网站</p><p><a href="https://delesign.com/free-designs/graphics/">https://delesign.com/free-designs/graphics/</a></p><p><a href="https://undraw.co/illustrations">https://undraw.co/illustrations</a> </p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客自动部署--github action</title>
      <link href="/hexo/posts/2970/"/>
      <url>/hexo/posts/2970/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-自动部署"><a href="#hexo-自动部署" class="headerlink" title="hexo 自动部署"></a>hexo 自动部署</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本博客部署在github 使用github action 进行自动部署.</p><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">阮一峰的网络日志</a></p><p><a href="https://blog.csdn.net/qq_73142349/article/details/138245304">使用Github Action实现Hexo博客自动化部署</a></p><p><a href="https://zonggc.github.io/hexo/blog/hexo/deploy/hexo-gitHub-actions/">Hexo 集成 GitHub Actions 自动部署</a> 使用sshkey 方式尽心同步</p><p><a href="https://cloud.tencent.com/developer/article/2369534">【Hexo自动部署】优雅的使用 Github Actions 进行 Hexo 静态博客的持续集成与部署</a></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>在github 新创建两个库  </p><ul><li><p>hexo (公开库) 发布博客静态页面 </p></li><li><p>hexosource (私有库) 博客源码存储</p></li></ul><blockquote><p>此处也可以在同一仓库的 以不同分支进行部署.  例如 master是源码   gh_page是博客静态文件</p></blockquote><h4 id="获取Token"><a href="#获取Token" class="headerlink" title="获取Token"></a>获取Token</h4><p>为了确保交由Github Action来持续部署时，Github Action具备足够的权限来进行hexo deploy操作, 需要先获取Token</p><p>访问<a href="https://github.com/settings/tokens">Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;generate new token</a>,创建的Token名称随意，但必须勾选repo项和workflows项。</p><blockquote><p>Token只会显示一次，请在生成Token之后立即记录下来，否则如果忘记了Token，就必须重新生成重新配置</p></blockquote><p><a href="https://zonggc.github.io/hexo/blog/hexo/deploy/hexo-gitHub-actions/">另外有使用ssh key 进行部署教程</a></p><h4 id="配置博客deploy信息"><a href="#配置博客deploy信息" class="headerlink" title="配置博客deploy信息"></a>配置博客deploy信息</h4><pre><code>deploy:  type: git#  repo: git@github.com:liudongsir/hexo2.git#  此处使用token连接是为了github action 工作流执行时有访问仓库的权限  repo: https://yourtoken@github.com/liudongsir/hexo2.git  branch: master</code></pre><h4 id="配置Github-Action工作流"><a href="#配置Github-Action工作流" class="headerlink" title="配置Github Action工作流"></a>配置Github Action工作流</h4><ul><li><p>在博客源码hexosource 中 新建<code>.github/workfolws</code>文件</p></li><li><p>新建工作流配置文件 <code>deploy.yml</code>    文件名随便,同一仓库可部署多个工作流</p></li></ul><pre><code># 脚本1，供初学者使用，如有其他需要在部署前运行的插件（如gulp、hexo-bangumi-bilibili等，请参考脚本2）# 当有改动推送到master分支时，启动Action# Action 的名字name: Hexo Auto Deployon:  push:    branches:      - masterenv:  # 使用此 git 用户部署到 github 仓库  GIT_USER: liudong  # 使用此 git 邮箱部署到 github 仓库  GIT_EMAIL: 571633329@qq.comjobs:  build:    runs-on: ubuntu-latest    steps:      - name: 拉取仓库代码        uses: actions/checkout@v2        with:          ref: master      - name: 安装nodejs        uses: actions/checkout@v2        with:          node-version: 22.1.0      - name: Cache node_modules # 缓存 node_modules，提高编译速度，毕竟每月只有 2000 分钟。        uses: actions/cache@v2  # 亲测 Github 服务器编译速度比我自己电脑都快，如果每次构建按5分钟计算，我们每个月可以免费部署 400 次，Github yyds！！！        env:          cache-name: cache-node-modules        with:          path: ~/.npm          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles('**/package-lock.json') &#125;&#125;          restore-keys: |            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-            $&#123;&#123; runner.os &#125;&#125;-build-            $&#123;&#123; runner.os &#125;&#125;-      # 配置环境      - name: 配置环境        run: |          git config --global user.name $GIT_USER          git config --global user.email $GIT_EMAIL      # 安装依赖      - name: 安装依赖        run: |          npm install hexo-cli -g           echo &quot;install hexo successful&quot;          npm install          echo &quot;init node successful&quot;      # 克隆 Hexo 静态资源库      # clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件      # 此处的仓库链接是我的个人仓库，请根据你的仓库链接进行修改,      #仓库路径可以有第二种写法      - name: 克隆 Hexo 静态资源库        run: |          git clone https://yourtoken@github.com/liudongsir/hexo2.git .deploy_git      # 部署  部署可以使用 hexo d 进行部署 也可以使用git直接推送      - name: 部署 Hexo        run: |          hexo clean          hexo generate          echo &quot;build blog successful&quot;          hexo deploy      - run: echo &quot;Deploy Successful!&quot;</code></pre><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul><li>github page用法研究</li><li>使用国内的 coding能都部署到github仓库中?</li><li>添加自动运行脚本</li></ul><h4 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h4><h5 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h5><pre><code>git initgit remote add origin https://github.com/yourusername/your-repo.gitgit add .git commit -m &quot;Initial commit&quot;git push -u origin main</code></pre><h5 id="butterfly-自动化执行失败"><a href="#butterfly-自动化执行失败" class="headerlink" title="butterfly 自动化执行失败"></a>butterfly 自动化执行失败</h5><blockquote><p>我使用的butterfly主题, 在工作流执行过程中报错,主题的自定义标签不识别</p><p>但是过了一会 又可以了, 怀疑是哪的缓存造成的.</p></blockquote><p>仓库路径的第二种写法</p><blockquote><p>本文中仓库路径采用<code>https://youtoken@github.com/liudongsir/hexo2.git</code>的写法</p><p>另有一种方式设置 : 使用变量的方式</p><p><code>https://$&#123;&#123; secrets.TOKEN_NAME&#125;&#125;@github.com/liudongsir/hexo2.git</code></p><p>不过即使在此处设置了变量, 在 博客根配置_config.yml 中配置deploy.repo 的时候 还是要将token显示的写出来</p><p>即:<code>https://youtoken@github.com/liudongsir/hexo2.git</code></p><p><img src="/hexo/images/2024-07-05hexo%20githubaction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/image-20240705141755381.png" alt="image-20240705141755381"></p></blockquote><h5 id="部署静态文件的第二种方式"><a href="#部署静态文件的第二种方式" class="headerlink" title="部署静态文件的第二种方式"></a>部署静态文件的第二种方式</h5><p>参考  原文链接：<a href="https://blog.csdn.net/qq_73142349/article/details/138245304">https://blog.csdn.net/qq_73142349/article/details/138245304</a> </p><p>上面采用 hexo g 自动部署, 也可以采用 git 命令推送的方式</p><blockquote><pre><code>- name: Deploy to GitHub Pages        env:          GH_TOKEN: $&#123;&#123; secrets.GH_TOKEN &#125;&#125;        run: |          cd public/          git init          git add -A          git commit -m &quot;Create by workflows&quot;          git remote add origin https://$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@github.com/yourusername/your-repo.git          git push origin HEAD:gh-pages -f                    原文链接：https://blog.csdn.net/m0_51390969/article/details/139838128</code></pre></blockquote><h5 id="配置hexosource-gitignore"><a href="#配置hexosource-gitignore" class="headerlink" title="配置hexosource gitignore"></a>配置hexosource gitignore</h5><pre><code># 新建 .gitignore文件 根.git同级.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航页搭建</title>
      <link href="/hexo/posts/5f8ff0b7/"/>
      <url>/hexo/posts/5f8ff0b7/</url>
      
        <content type="html"><![CDATA[<h2 id="我的导航页搭建"><a href="#我的导航页搭建" class="headerlink" title="我的导航页搭建"></a>我的导航页搭建</h2><p>图片测试</p><p><img src="/hexo/images/2024-07-04%E5%AF%BC%E8%88%AA%E9%A1%B5/back-title-1720100771620.jpg" alt="back-title"></p><p><img src="/hexo/../../images/back-title.jpg" alt="back-title"></p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题设置</title>
      <link href="/hexo/posts/53336/"/>
      <url>/hexo/posts/53336/</url>
      
        <content type="html"><![CDATA[<h2 id="butterfly-主题设置"><a href="#butterfly-主题设置" class="headerlink" title="butterfly 主题设置"></a>butterfly 主题设置</h2><blockquote><p>先前准备使用matery主题, 设置评论的过程中总是开启失败, 所以切换了butterfly主题</p></blockquote><p><a href="https://blog.lixiaomu.fun/posts/43857/">主题来源</a></p><blockquote><p>其他几款主题</p></blockquote><ul><li>安知鱼  <a href="https://docs.anheyu.com/initall.html">https://docs.anheyu.com/initall.html</a></li><li>steller  <a href="https://xaoxuu.com/wiki/stellar/">https://xaoxuu.com/wiki/stellar/</a></li><li>acorn  <a href="https://acorn.imaging.xin/">https://acorn.imaging.xin/</a>    hexo 企业站</li><li>Keep <a href="https://github.com/XPoet/hexo-theme-keep">https://github.com/XPoet/hexo-theme-keep</a>  大气简单 可以试试</li><li>solitude <a href="https://github.com/everfu/hexo-theme-solitude">https://github.com/everfu/hexo-theme-solitude</a>  和安知鱼有点像</li><li>maupassant <a href="https://github.com/tufu9441/maupassant-hexo">https://github.com/tufu9441/maupassant-hexo</a>  像故事集一样主题</li><li>MengD <a href="https://github.com/lete114/hexo-theme-MengD">https://github.com/lete114/hexo-theme-MengD</a>   和上面一个风格过之不及</li><li>fluid  <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a>   没具体看 不过用的人也挺多</li></ul><p>本博客将会同步到 hexo2source 仓库</p><h3 id="资料准备"><a href="#资料准备" class="headerlink" title="资料准备"></a>资料准备</h3><p>Hexo 官方中文文档<br><a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><p>butterfly官方文档  设置教程<br><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>Github 项目地址<br><a href="https://github.com/jerryc127/butterfly.js.org">https://github.com/jerryc127/butterfly.js.org</a></p><p>主题开发者适配的插件<br><a href="https://github.com/jerryc127/butterfly-plugins">https://github.com/jerryc127/butterfly-plugins</a></p><p>魔改教程</p><p><a href="https://butterfly.zhheo.com/">https://butterfly.zhheo.com/</a></p><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><pre><code>git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></pre><ul><li>安装主题依赖</li></ul><pre><code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code></pre><h3 id="个人常用配置"><a href="#个人常用配置" class="headerlink" title="个人常用配置"></a>个人常用配置</h3><h5 id="个人Front-matter配置"><a href="#个人Front-matter配置" class="headerlink" title="个人Front-matter配置"></a>个人Front-matter配置</h5><pre><code>例如本文的配置title: butterfly主题设置description: hexo+butterfly搭建教程 转自https://winward-king.github.io/tags/hexo/date: 2024-07-04 18:05:58tags: hexo博客categories: hexo博客series: hexo博客   #系列文章设置sticky: 100  数越大.文章越靠前</code></pre><h5 id="设置代码格式"><a href="#设置代码格式" class="headerlink" title="设置代码格式"></a>设置代码格式</h5><pre><code>highlight_height_limit: 400 # unit: px  default :highlight_height_limit: falsecode_word_wrap: true</code></pre><h5 id="添加默认大图"><a href="#添加默认大图" class="headerlink" title="添加默认大图"></a>添加默认大图</h5><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">default_top_img</span><span class="token punctuation">:</span> /images/back<span class="token punctuation">-</span>title.jpg  配置随机图片地址  或则 default_cover_img 数组 可以实现图片随机<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="调整侧边栏"><a href="#调整侧边栏" class="headerlink" title="调整侧边栏"></a>调整侧边栏</h5><pre><code>_config.ymlaside: 关闭公告页面</code></pre><h5 id="设置页面直接编辑"><a href="#设置页面直接编辑" class="headerlink" title="设置页面直接编辑"></a>设置页面直接编辑</h5><pre><code>post_edit:  enable: true  url: https://github.com/liudongsir/hexo2source/tree/master/source/</code></pre><p><em>页面虽然可以直接编辑 但是图片在线上路径错误.寻找新的图片插件解决下</em></p><h5 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h5><p>主题自带了<code>hexo-generator-index</code> 置顶插件,在<code>Front-matter</code>中配置 <code>sticky: 1</code>  数字大靠前。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><blockquote><p>官方插件库 <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></p></blockquote><ul><li><h5 id="增加git部署插件"><a href="#增加git部署插件" class="headerlink" title="增加git部署插件"></a>增加git部署插件</h5><pre><code>npm install hexo-deployer-git --save</code></pre></li><li><h5 id="增加本地搜索"><a href="#增加本地搜索" class="headerlink" title="增加本地搜索"></a>增加本地搜索</h5><pre><code>npm install hexo-generator-searchdb --save</code></pre></li><li><h5 id="增加字数统计插件"><a href="#增加字数统计插件" class="headerlink" title="增加字数统计插件"></a>增加字数统计插件</h5><pre><code>npm i --save hexo-wordcount</code></pre></li><li><h5 id="增加短链插件"><a href="#增加短链插件" class="headerlink" title="增加短链插件"></a>增加短链插件</h5><pre><code>npm install hexo-abbrlink --save_config.ymlpermalink: posts/:abbrlink/</code></pre><blockquote><p>引入插件后 会在  Front-matter 中添加字段 abbrlink,</p><p>连接永久有效,除非你自己改动文件 abbrlink</p></blockquote></li></ul><h4 id="下面的插件不是必须安装"><a href="#下面的插件不是必须安装" class="headerlink" title="下面的插件不是必须安装"></a>下面的插件不是必须安装</h4><ul><li><h5 id="hexo-daily-news"><a href="#hexo-daily-news" class="headerlink" title="hexo-daily-news"></a>hexo-daily-news</h5><blockquote><p>早报   <a href="https://github.com/Shiguang-coding/hexo-daily-news">https://github.com/Shiguang-coding/hexo-daily-news</a></p><p><a href="https://v2.alapi.cn/api/zaobao?token=eFiWkgTzAipWiPru&format=image">https://v2.alapi.cn/api/zaobao?token=eFiWkgTzAipWiPru&amp;format=image</a>  直接请求即可</p></blockquote><pre><code></code></pre></li></ul><p>cnpm install hexo-daily-news –save</p><pre><code>- ##### hexo-dynamic-config&gt; 配置环境变量的插件- ##### hexo-generator-readme-file&gt; 为你的文章生成一个 `README.md` 文件，里面包含了所有的文章链接。&gt;&gt; 可以用来制作 章节目录&gt;&gt; 另外可以利用 series 制作章节目录&gt;&gt; 另有插件 hexo-generator-readme 使用报错- ##### hexo-generator-random&gt; 随机文章访问插件- ##### hexo-image-link### 优化##### 使用 Front-matter  series 属性</code></pre><p>在项目中使用  <code>&#123;% series %&#125;</code>    做系列导航页.</p><pre><code>##### 404页面添加随机图片</code></pre><p>error_404:<br>  enable: true<br>  subtitle: ‘Page Not Found’<br>  background: <a href="https://cdn.seovx.com/?mom=302">https://cdn.seovx.com/?mom=302</a></p><pre><code>&gt; 图片地址是来源于 [https://weblog.lixiaomu.fun/posts/d55a4b452f7a/](https://weblog.lixiaomu.fun/posts/d55a4b452f7a/)&gt;&gt; [福利](https://www.seovx.com/st/)&gt;&gt; 官方用法 :https://cdn.seovx.com/?mom=302 访问链接即可获取美图##### 随机图片地址- 教程实例&gt; https://cdn.seovx.com/&gt;&gt; https://blog.csdn.net/SectSnow/article/details/115835711 随机图片网站&gt;&gt; https://weblog.lixiaomu.fun/posts/d55a4b452f7a/ 十个壁纸站- 用法一般直接放在`&lt;img src=&quot;&quot;&gt;`的 src 属性里即可。比如：`&lt;img src=&quot;http://api.nmb.show/xiaojiejie1.php&quot;&gt;`或者 `Markdown`里：`![随机图片](http://api.nmb.show/xiaojiejie1.php)`- 推荐 [https://t.alcy.cc/](https://t.alcy.cc/)  [调用示例](https://t.alcy.cc/fj/)  二次元风景[https://imgapi.cn/wiki.html](https://imgapi.cn/wiki.html)    [调用示例](https://imgapi.cn/api.php?zd=pc&amp;fl=fengjing&amp;gs=images)[https://www.dmoe.cc/](https://www.dmoe.cc/)   [调用示例](https://www.dmoe.cc/random.php)   二次元图片https://unsplash.com/developers 可根据关键字搜索图片      [教程查看](https://blog.csdn.net/SectSnow/article/details/115835711)- 还有更下头的https://www.cunshao.com/666666/api/web.php##### 随机一句话</code></pre><h1 id="source-1-調用一言網的一句話（簡體）-https-hitokoto-cn"><a href="#source-1-調用一言網的一句話（簡體）-https-hitokoto-cn" class="headerlink" title="source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/"></a>source: 1  調用一言網的一句話（簡體） <a href="https://hitokoto.cn/">https://hitokoto.cn/</a></h1><h1 id="source-2-調用一句網（簡體）-https-yijuzhan-com"><a href="#source-2-調用一句網（簡體）-https-yijuzhan-com" class="headerlink" title="source: 2  調用一句網（簡體） https://yijuzhan.com/"></a>source: 2  調用一句網（簡體） <a href="https://yijuzhan.com/">https://yijuzhan.com/</a></h1><h1 id="source-3-調用今日詩詞（簡體）-https-www-jinrishici-com"><a href="#source-3-調用今日詩詞（簡體）-https-www-jinrishici-com" class="headerlink" title="source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/"></a>source: 3  調用今日詩詞（簡體） <a href="https://www.jinrishici.com/">https://www.jinrishici.com/</a></h1><pre><code>##### 增加网站统计(未完成)https://weblog.lixiaomu.fun/charts/   可以方便的查看自己的标签##### 网站内链新标签打开- 方法一 使用 hexo 配置文件   `external_link.enable:true:`并不能打开新标签,最总使用了一下方法**方法缺陷:所有的a标签都会打开新标签**</code></pre><p>通过inject属性添加到header标签中去<br>_config.butterfly.conf<br>inject:<br>  head:<br>    - <base target="_blank"></p><pre><code>- #####  方法二参考: https://fe32.top/articles/hexo1619/***使用方法二之后,就把方法一取消了,对于一些站内链接可以通过浏览器的特性决定是否打开新标签***- 代码修改</code></pre><p>menu_item.pug</p><p>if theme.menu<br>  .menus_items<br>    each value, label in theme.menu<br>      if typeof value !&#x3D;&#x3D; ‘object’<br>        .menus_item<br>          - const valueArray &#x3D; value.split(‘||’)<br>          - const isBlank &#x3D;   valueArray[2] &amp;&amp; trim(valueArray[2]) &#x3D;&#x3D;&#x3D; ‘_blank’ ? ‘_blank’ : ‘_self’<br>          a.site-page(href&#x3D;url_for(trim(valueArray[0])) target&#x3D;<code>$&#123;isBlank&#125;</code> )<br>            if valueArray[1]<br>              i.fa-fw(class&#x3D;trim(valueArray[1]))<br>            span&#x3D;’ ‘+label<br>      else<br>        .menus_item<br>          - const labelArray &#x3D; label.split(‘||’)<br>          - const hideClass &#x3D; labelArray[2] &amp;&amp; trim(labelArray[2]) &#x3D;&#x3D;&#x3D; ‘hide’ ? ‘hide’ : ‘’<br>          a.site-page.group(class&#x3D;<code>$&#123;hideClass&#125;</code> href&#x3D;’javascript:void(0);’)<br>            if labelArray[1]<br>              i.fa-fw(class&#x3D;trim(labelArray[1]))<br>            span&#x3D;’ ‘+ trim(labelArray[0])<br>            i.fas.fa-chevron-down<br>          ul.menus_item_child<br>            each val,lab in value<br>              - const valArray &#x3D; val.split(‘||’)<br>              - const isBlank &#x3D;  valArray[2] &amp;&amp; trim(valArray[2]) &#x3D;&#x3D;&#x3D; ‘_blank’ ? ‘_blank’ : ‘_self’<br>              li<br>                a.site-page.child(href&#x3D;url_for(trim(valArray[0])) target&#x3D;<code>$&#123;isBlank&#125;</code>)<br>                  if valArray[1]<br>                    i.fa-fw(class&#x3D;trim(valArray[1]))<br>                  span&#x3D;’ ‘+ lab</p><pre><code>- 使用</code></pre><p>menu:<br>  首页: &#x2F; || fas fa-home<br>  个人|| fas fa-user-secret||hide:<br>    关于自己: &#x2F;about&#x2F; || fas fa-heart<br>    网址收藏: &#x2F;nav&#x2F;index.html || fa-fw fas fa-infinity || _blank<br>    音乐长廊: &#x2F;music&#x2F;index.html || fa-fw fas fa-music || _blank</p><pre><code>****------##### 样式修改- 选中了 [https://weblog.lixiaomu.fun/posts/a837db1d06ac/](https://weblog.lixiaomu.fun/posts/a837db1d06ac/) 博客的样式, 而且它的博客也是 butterfly主题的. 直接扒下网站源码 。- 把里面的css文件 放入 butteryfly `source/css/custom`文件夹下-  编辑文件   *themes\butterfly\layout\includes\head.pug*  添加内容</code></pre><p>  &#x2F;&#x2F; todo  李小沐博客的主题<br>  link(rel&#x3D;’stylesheet’, href&#x3D;url_for(‘&#x2F;css&#x2F;coin&#x2F;custom.css’))<br>  link(rel&#x3D;’stylesheet’, href&#x3D;url_for(‘&#x2F;css&#x2F;coin&#x2F;xuanfu.css’))<br>  link(rel&#x3D;’stylesheet’, href&#x3D;url_for(‘&#x2F;css&#x2F;coin&#x2F;yejiao.css’))<br>  &#x2F;&#x2F;&#x2F;&#x2F; todo  李小沐博客的主题 end</p><pre><code>*本想利用主题配置文件的  inject heade 添加内容， 但是 我的博客根路径 为 `/hexo2`,导致相对路径总是找不到 。* 还有点小毛病， 再找时间调整吧##### gitalk 自动生成issue使用插件`hexo-auto-issue` 设置未成功  [https://github.com/buxuku/hexo-auto-issue](https://github.com/buxuku/hexo-auto-issue)`npm i hexo-create-issues  ` 只能通过hexo new title 触发 作为备选### 添加在线评论&gt; 采用gitalk 评论方案,&gt;&gt; 优点:不需要部署后台,或则注册服务&gt;&gt; 缺点:  需要github登录,不允许匿名评论*评论只能在线上使用,本地环境不能访问。*- 注册应用-  访问链接 https://github.com/settings/developers 注册新应用- homepage URL 填写博客根路径  `https://liudongsir.github.io/hexo2`- Authorization callback URL填写博客根路径  `https://liudongsir.github.io/hexo2`- 配置文件</code></pre><p>_config.yml<br>comments:<br>  use: gitalk</p><p>gitalk:<br>  client_id: *****<br>  client_secret: *****<br>  repo: hexo2<br>  owner: liudongsir<br>  admin: liudongsir<br>  option:</p><pre><code>后记评论 系统  gitalk   gitcomment 权限过高可以使用  giscus 和  utterances (相比上面两个权限要低)可以查看   matery 主题配置文件中对各个评论系统有介绍. butterfly评论系统接入 https://fe32.top/articles/hexo1611/giscus 接入https://giscus.app/zh-CN#category****### 待做- ~~根据matery主题设置随机文章配图~~  *主题使用多了之后发现图文结合是挺好看 但是 翻阅效率有点低*- ~~添加个人导航链接~~- 设置系列文章的排序规则,目前文章根据日期排序 同一天写的文章就会有排序混乱- ~~研究下自动部署~~  使用github自动部署已经成功   &#123;% post_link 'hexo/2024-07-05hexo githubaction自动部署' 'hexo github action 配置' %&#125;- 写个脚本 一键上传代码避免频繁执行命令- ~~增加hexo plus plus 支持[https://hexoplusplus.js.org/](https://hexoplusplus.js.org/)~~  需要其他服务支持,暂不需要.- 增加在线留言.- 优化下访问速度,  pwa  图片压缩(tinypng   gulp)  cnd 优化- seo优化   [https://opstrip.com/2017/03/12/hexo-sitemap-keywords/](https://opstrip.com/2017/03/12/hexo-sitemap-keywords/)- ~~导航栏增加栏目, 快速导航~~  &gt; 将 categories 合集 放在 nav页二级菜单下- 考虑新做个页面 实现文章的导航  webstack 类似 , 学习下 新增page 页面编辑  先考虑把matery 主题的分类页页移植过来  或则参考 博客单页 https://m.seovx.com/- 项目内a 标签打开的问题 内链是打开新页面还是当前页面- 在线接口 获取的东西  随机壁纸  随机 游戏  随机鸡汤;- [页面是真的骚](https://weblog.lixiaomu.fun/posts/43857/)- 标签插件能不能增加  ==重点显示==  支持   或则换一个markdown的编辑器  vscode?- 文章排序   `https://github.com/dimonpanik/hexo-custom-sort`- hexo  后台管理;  后台管理属于领不清, 有后台的话  还用hexo干嘛### 最后http://www.alapi.cn/  api 接口聚合#### butterFly 在线评论##### 前言&gt; 在线聊天实际意义不大, 有问题直接添加联系方式聊天方便。&gt;&gt; 其实更适合做一个在线客服功能。参看:https://blog.csdn.net/qq_41356250/article/details/126707325###### crisp注册失败,直接pass###### tidio安装成功, 但是只能网页回复![图是对话截图,适合做在线客服](/images/2024-07-04butterfly%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/image-20240708142627584.png)</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志使用</title>
      <link href="/hexo/posts/undefined/"/>
      <url>/hexo/posts/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><h3 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h3><pre class="line-numbers language-java"><code class="language-java">         <span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>log4j<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">17</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code># This is the configuring for logging displayed in the Application Serverlog4j.rootLogger=DEBUG,stdout#stdout configurelog4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern= %d %p [%c] - &lt;%m&gt;%n#logfile configurelog4j.appender.logfile=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.logfile.File=logs/log.loglog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.DatePattern = &#39;.&#39;yyyy-MM-ddlog4j.appender.logfile.layout.ConversionPattern= %d %p [%c] - &lt;%m&gt;%nlog4j.logger.com.inspur.interfaces.task=INFO,info,error,warn,stdoutlog4j.additivity.com.inspur.interfaces.task=falselog4j.appender.info=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.info.Threshold=INFO#log4j.appender.info.Append=falselog4j.appender.info.File=logs/info.loglog4j.appender.info.layout=org.apache.log4j.PatternLayoutlog4j.appender.info.DatePattern = &#39;.&#39;yyyy-MM-ddlog4j.appender.info.layout.ConversionPattern= %d %p [%c] - &lt;%m&gt;%nlog4j.appender.info.filter.infoFilter = org.apache.log4j.varia.LevelRangeFilterlog4j.appender.info.filter.infoFilter.LevelMin = INFOlog4j.appender.info.filter.infoFilter.LevelMax = INFOlog4j.appender.warn=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.warn.Threshold=WARN#log4j.appender.warn.Append=falselog4j.appender.warn.File=logs/result.loglog4j.appender.warn.layout=org.apache.log4j.PatternLayoutlog4j.appender.warn.DatePattern = &#39;.&#39;yyyy-MM-ddlog4j.appender.warn.layout.ConversionPattern= %d %p [%c] - &lt;%m&gt;%nlog4j.appender.warn.filter.infoFilter = org.apache.log4j.varia.LevelRangeFilterlog4j.appender.warn.filter.infoFilter.LevelMin = WARNlog4j.appender.warn.filter.infoFilter.LevelMax = WARNlog4j.appender.error=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.error.Threshold=ERROR#log4j.appender.error.Append=falselog4j.appender.error.File=logs/error.loglog4j.appender.error.layout=org.apache.log4j.PatternLayoutlog4j.appender.error.DatePattern = &#39;.&#39;yyyy-MM-ddlog4j.appender.error.layout.ConversionPattern= %d %p [%c] - &lt;%m&gt;%n</code></pre><h2 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/zbajie001/article/details/79596109">logback和log4j比较，前者是后者改良，logback配置详解</a></p><p><a href="http://www.51gjie.com/javaweb/1107.html">logback</a></p><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><pre class="line-numbers language-java"><code class="language-java">一般springboot自带依赖<span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>slf4j<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>slf4j<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.7</span><span class="token punctuation">.</span><span class="token number">21</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>logback<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>  <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>logback<span class="token operator">-</span>classic<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>  <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">7</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> scan属性未<span class="token boolean">true</span>时，如果配置文档发生改变将会进行重新加载 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> scanPeriod属性设置监测配置文件修改的时间间隔，默认单位为毫秒，在scan为<span class="token boolean">true</span>时才生效 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> debug属性如果为<span class="token boolean">true</span>时，会打印出logback内部的日志信息 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration scan<span class="token operator">=</span><span class="token string">"true"</span> scanPeriod<span class="token operator">=</span><span class="token string">"60 seconds"</span> debug<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>string name<span class="token operator">=</span><span class="token string">"123"</span><span class="token operator">></span>你好<span class="token operator">&lt;</span><span class="token operator">/</span>string<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义参数常量 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 日志级别：TRACE<span class="token operator">&lt;</span>DEBUG<span class="token operator">&lt;</span>INFO<span class="token operator">&lt;</span>WARN<span class="token operator">&lt;</span>ERROR，其中常用的是DEBUG、INFO和ERROR <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"log.level"</span> value<span class="token operator">=</span><span class="token string">"debug"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 文件保留时间 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"log.maxHistory"</span> value<span class="token operator">=</span><span class="token string">"30"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 日志存储路径 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"log.filePath"</span> value<span class="token operator">=</span><span class="token string">"logs/logback"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 日志的显式格式 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"log.pattern"</span>              value<span class="token operator">=</span><span class="token string">"%d&amp;#123;yyyy-MM-dd HH:mm:ss.SSS&amp;#125; [%thread] %-5level %logger[%file : %line]-%msg%n"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token operator">%</span>d <span class="token punctuation">[</span><span class="token operator">%</span>thread<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span>5level <span class="token operator">%</span>logger<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">36</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token operator">%</span>file <span class="token operator">:</span> <span class="token operator">%</span>line<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">%</span>msg<span class="token operator">%</span>n<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义参数常量 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 用于说明输出介质，此处说明控制台输出 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">"consoleAppender"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.ConsoleAppender"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 类似于layout，除了将时间转化为数组，还会将转换后的数组输出到相应的文件中 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>encoder<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义日志的输出格式 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>pattern<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>pattern<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>pattern<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">></span>        <span class="token operator">&lt;</span>target<span class="token operator">></span>system<span class="token punctuation">.</span>out<span class="token operator">&lt;</span><span class="token operator">/</span>target<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> DEBUG，表示文件随着时间的推移按时间生成日志文件 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">"debugAppender"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 文件路径 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>file<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>filePath<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span>debug<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>file<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        <span class="token operator">&lt;</span>append<span class="token operator">></span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>append<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 滚动策略 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>rollingPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置文件名称 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>fileNamePattern<span class="token operator">></span>                $<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>filePath<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span>zdebug<span class="token punctuation">.</span>%d<span class="token punctuation">.</span>log            <span class="token operator">&lt;</span><span class="token operator">/</span>fileNamePattern<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置最大保存周期 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>MaxHistory<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>maxHistory<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>MaxHistory<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>rollingPolicy<span class="token operator">></span>        <span class="token operator">&lt;</span>encoder<span class="token operator">></span>            <span class="token operator">&lt;</span>pattern<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>pattern<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>pattern<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 过滤器，过滤掉不是指定日志水平的日志 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>filter <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.classic.filter.LevelFilter"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 设置日志级别 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>level<span class="token operator">></span>DEBUG<span class="token operator">&lt;</span><span class="token operator">/</span>level<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果跟该日志水平相匹配，则接受 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>onMatch<span class="token operator">></span>ACCEPT<span class="token operator">&lt;</span><span class="token operator">/</span>onMatch<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 如果跟该日志水平不匹配，则过滤掉 <span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>onMismatch<span class="token operator">></span>DENY<span class="token operator">&lt;</span><span class="token operator">/</span>onMismatch<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">></span>    <span class="token operator">&lt;</span>appender name<span class="token operator">=</span><span class="token string">"file"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.RollingFileAppender"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义日志输出的路径<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里的scheduler<span class="token punctuation">.</span>manager<span class="token punctuation">.</span>server<span class="token punctuation">.</span>home 没有在上面的配置中设定，所以会使用java启动时配置的值<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>比如通过 java <span class="token operator">-</span>Dscheduler<span class="token punctuation">.</span>manager<span class="token punctuation">.</span>server<span class="token punctuation">.</span>home<span class="token operator">=</span><span class="token operator">/</span>path<span class="token operator">/</span>to XXXX 配置该属性<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>file<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>filePath<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span>file<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>file<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        <span class="token operator">&lt;</span>append<span class="token operator">></span><span class="token boolean">false</span><span class="token operator">&lt;</span><span class="token operator">/</span>append<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义日志滚动的策略<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>rollingPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义文件滚动时的文件名的格式<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>fileNamePattern<span class="token operator">></span>$<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span>filePath<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">/</span>zfile<span class="token punctuation">.</span>%d<span class="token operator">%</span>i<span class="token punctuation">.</span>log<span class="token operator">&lt;</span><span class="token operator">/</span>fileNamePattern<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">60</span>天的时间周期，日志量最大20GB<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>maxHistory<span class="token operator">></span><span class="token number">60</span><span class="token operator">&lt;</span><span class="token operator">/</span>maxHistory<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 该属性在 <span class="token number">1.1</span><span class="token punctuation">.</span><span class="token number">6</span>版本后 才开始支持<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>totalSizeCap<span class="token operator">></span>20GB<span class="token operator">&lt;</span><span class="token operator">/</span>totalSizeCap<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>rollingPolicy<span class="token operator">></span>        <span class="token operator">&lt;</span>triggeringPolicy <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>每个日志文件最大100MB<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>maxFileSize<span class="token operator">></span>1KB<span class="token operator">&lt;</span><span class="token operator">/</span>maxFileSize<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>triggeringPolicy<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>定义输出格式<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>encoder<span class="token operator">></span>            <span class="token operator">&lt;</span>pattern<span class="token operator">></span><span class="token operator">%</span>d <span class="token punctuation">[</span><span class="token operator">%</span>thread<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span>5level <span class="token operator">%</span>logger <span class="token punctuation">[</span><span class="token operator">%</span>file <span class="token operator">:</span> <span class="token operator">%</span>line<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token operator">%</span>msg<span class="token operator">%</span>n<span class="token operator">&lt;</span><span class="token operator">/</span>pattern<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>encoder<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>appender<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 用于存放日志对象，同时指定关联的<span class="token keyword">package</span>位置 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> name指定关联的<span class="token keyword">package</span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> level表明指记录哪个日志级别以上的日志 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> appender<span class="token operator">-</span>ref指定logger向哪个文件输出日志信息 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> additivity为<span class="token boolean">true</span>时，logger会把根logger的日志输出地址加入进来，但logger水平不依赖于根logger <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>logger name<span class="token operator">=</span><span class="token string">"com.inspur.interfaces.task"</span> level<span class="token operator">=</span><span class="token string">"$&amp;#123;log.level&amp;#125;"</span> additivity<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"debugAppender"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>logger<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 特殊的logger，根logger <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>root lever<span class="token operator">=</span><span class="token string">"info"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 指定默认的日志输出 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"consoleAppender"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>appender<span class="token operator">-</span>ref ref<span class="token operator">=</span><span class="token string">"file"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>root<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日志使用</title>
      <link href="/hexo/posts/undefined/"/>
      <url>/hexo/posts/undefined/</url>
      
        <content type="html"><![CDATA[<p><img src="/hexo/hexo/imagetest/imagetest/back-title.jpg" alt="back-title"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>右键菜单</title>
      <link href="/hexo/posts/undefined/"/>
      <url>/hexo/posts/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h2><p>[TOC]</p><h3 id="创建右键cmd"><a href="#创建右键cmd" class="headerlink" title="创建右键cmd"></a>创建右键cmd</h3><pre class="line-numbers language-java"><code class="language-java">创建一个cmd<span class="token punctuation">.</span>reg 输入以下内容Windows Registry Editor Version <span class="token number">5.00</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"打开命令行"</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\cmd_here\command<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"\"C:\\Windows\\System32\\cmd.exe\""</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"打开命令行"</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\cmdPrompt\command<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"\"C:\\Windows\\System32\\cmd.exe\" \"cd %1\""</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"打开命令行"</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\shell\cmd_here\command<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"\"C:\\Windows\\System32\\cmd.exe\""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置图表-icon"><a href="#设置图表-icon" class="headerlink" title="设置图表 icon"></a>设置图表 icon</h4><p>在 cmd_here 下创建 字符串值    icon   值:</p><p>可以设置为   C:\Windows\System32\cmd.exe</p><p>也可以直接设置一个图片 test.icon</p><h3 id="设置-winr快捷命令"><a href="#设置-winr快捷命令" class="headerlink" title="设置 winr快捷命令"></a>设置 winr快捷命令</h3><h4 id="设置vbs脚本"><a href="#设置vbs脚本" class="headerlink" title="设置vbs脚本"></a>设置vbs脚本</h4><pre class="line-numbers language-java"><code class="language-java">新建一个 inkpath<span class="token punctuation">.</span>vbs脚本' 脚本说明 https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>milaoshu1020<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">80711574</span>' 脚本版本 v1<span class="token number">.1</span>' installpath是本脚本要安装到的路径<span class="token punctuation">.</span>' d<span class="token operator">:</span>\L是脚本所在的路径<span class="token punctuation">,</span>也是保存快捷方式的目录<span class="token punctuation">.</span>' <span class="token punctuation">[</span>更新历史<span class="token punctuation">]</span>' <span class="token number">2019.06</span><span class="token punctuation">.</span><span class="token number">03</span> v1<span class="token number">.2</span> 增加了安装时自动提权的代码<span class="token punctuation">.</span>' <span class="token number">2018.12</span><span class="token punctuation">.</span><span class="token number">29</span> v1<span class="token number">.1</span> 新增加了对系统变量PATHEXT的注册<span class="token punctuation">,</span>效果是自定义命令可以在命令行中使用<span class="token punctuation">(</span>不用加扩展名<span class="token string">".LNK"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>' <span class="token number">2018.06</span><span class="token punctuation">.</span><span class="token number">18</span> v1<span class="token number">.0</span> 初始版本<span class="token punctuation">,</span>实现了基本功能<span class="token punctuation">.</span>installpath <span class="token operator">=</span> <span class="token string">"E:\worksoft\inkpath\Win+R快捷命令.vbs"</span>set fso <span class="token operator">=</span> <span class="token function">createobject</span><span class="token punctuation">(</span><span class="token string">"scripting.filesystemobject"</span><span class="token punctuation">)</span>set shell <span class="token operator">=</span> <span class="token function">createobject</span><span class="token punctuation">(</span><span class="token string">"wscript.shell"</span><span class="token punctuation">)</span>installdir <span class="token operator">=</span> fso<span class="token punctuation">.</span><span class="token function">getparentfoldername</span><span class="token punctuation">(</span>installpath<span class="token punctuation">)</span>installbase <span class="token operator">=</span> fso<span class="token punctuation">.</span><span class="token function">getbasename</span><span class="token punctuation">(</span>installpath<span class="token punctuation">)</span>If wscript<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span> Then    Set sh <span class="token operator">=</span> <span class="token function">createobject</span><span class="token punctuation">(</span><span class="token string">"shell.application"</span><span class="token punctuation">)</span>    sh<span class="token punctuation">.</span>shellexecute wscript<span class="token punctuation">.</span>fullname<span class="token punctuation">,</span><span class="token string">""</span><span class="token string">""</span> <span class="token operator">&amp;</span> wscript<span class="token punctuation">.</span>scriptfullname <span class="token operator">&amp;</span> <span class="token string">""</span><span class="token string">" -install"</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token string">"runas"</span>Else    If wscript<span class="token punctuation">.</span><span class="token function">arguments</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"-install"</span> Then        Select Case <span class="token function">msgbox</span><span class="token punctuation">(</span><span class="token string">"是否安装'"</span> <span class="token operator">&amp;</span> installbase <span class="token operator">&amp;</span> <span class="token string">"'脚本?"</span><span class="token punctuation">,</span>vbokcancel<span class="token punctuation">)</span>        Case vbcancel            wscript<span class="token punctuation">.</span>quit        End select        copyscriptfile        addinstdirtosystempath        createinstdirlnk        createsendtolnk        msgbox <span class="token string">"'"</span> <span class="token operator">&amp;</span> installpath <span class="token operator">&amp;</span> <span class="token string">"'安装完成,你现在可以:"</span> <span class="token operator">&amp;</span> vbcrlf <span class="token operator">&amp;</span> _            <span class="token string">"使用右键菜单中的'发送到'创建自定义命令."</span> <span class="token operator">&amp;</span> vbcrlf <span class="token operator">&amp;</span> _            <span class="token string">"Win+R,输入'"</span> <span class="token operator">&amp;</span> fso<span class="token punctuation">.</span><span class="token function">getfolder</span><span class="token punctuation">(</span>installdir<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">&amp;</span> <span class="token string">"'以打开命令(快捷方式)列表目录."</span> <span class="token operator">&amp;</span> vbcrlf <span class="token operator">&amp;</span> _            <span class="token string">"Win+R,输入'命令(快捷方式名称)'以打开相应的程序或者目录."</span>    Else        prompttoaddlnk    End IfEnd IfSub <span class="token function">PromptToAddLnk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    For i <span class="token operator">=</span> <span class="token number">0</span> To wscript<span class="token punctuation">.</span>arguments<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span>        targetpath <span class="token operator">=</span> wscript<span class="token punctuation">.</span><span class="token function">arguments</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        lnkname <span class="token operator">=</span> fso<span class="token punctuation">.</span><span class="token function">getbasename</span><span class="token punctuation">(</span>targetpath<span class="token punctuation">)</span>        <span class="token keyword">do</span>            lnkname <span class="token operator">=</span> <span class="token function">inputbox</span><span class="token punctuation">(</span><span class="token string">"请输入'"</span> <span class="token operator">&amp;</span> fso<span class="token punctuation">.</span><span class="token function">getfilename</span><span class="token punctuation">(</span>targetpath<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token string">"'的快捷方式名称(用于运行命令):"</span><span class="token punctuation">,</span><span class="token punctuation">,</span>lnkname<span class="token punctuation">)</span>            lnkpath <span class="token operator">=</span> fso<span class="token punctuation">.</span><span class="token function">buildpath</span><span class="token punctuation">(</span>installdir<span class="token punctuation">,</span>lnkname <span class="token operator">&amp;</span> <span class="token string">".lnk"</span><span class="token punctuation">)</span>            If Not fso<span class="token punctuation">.</span><span class="token function">fileexists</span><span class="token punctuation">(</span>lnkpath<span class="token punctuation">)</span> Or lnkname <span class="token operator">=</span> <span class="token string">""</span> Then                Exit Do            End If            Select Case <span class="token function">msgbox</span><span class="token punctuation">(</span><span class="token string">"'"</span> <span class="token operator">&amp;</span> lnkpath <span class="token operator">&amp;</span> <span class="token string">"'文件已存在,是否覆盖?"</span><span class="token punctuation">,</span>vbexclamation Or vbyesnocancel<span class="token punctuation">)</span>            Case vbyes                Exit Do            Case vbcancel                lnkname <span class="token operator">=</span> <span class="token string">""</span>                Exit Do            End Select        Loop While True        If lnkname <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token string">""</span> Then            Set shortcut <span class="token operator">=</span> shell<span class="token punctuation">.</span><span class="token function">createshortcut</span><span class="token punctuation">(</span>lnkpath<span class="token punctuation">)</span>            shortcut<span class="token punctuation">.</span>targetpath <span class="token operator">=</span> targetpath            shortcut<span class="token punctuation">.</span>save            msgbox <span class="token string">"'"</span> <span class="token operator">&amp;</span> lnkpath <span class="token operator">&amp;</span> <span class="token string">"'创建成功!"</span>        End If    NextEnd SubSub <span class="token function">CopyScriptFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    If <span class="token function">LCase</span><span class="token punctuation">(</span>installpath<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">LCase</span><span class="token punctuation">(</span>wscript<span class="token punctuation">.</span>scriptfullname<span class="token punctuation">)</span> Then        Exit Sub    End If    If Not fso<span class="token punctuation">.</span><span class="token function">folderexists</span><span class="token punctuation">(</span>installdir<span class="token punctuation">)</span> Then        fso<span class="token punctuation">.</span><span class="token function">createfolder</span><span class="token punctuation">(</span>installdir<span class="token punctuation">)</span>    End If    fso<span class="token punctuation">.</span>copyfile wscript<span class="token punctuation">.</span>scriptfullname<span class="token punctuation">,</span>installpath<span class="token punctuation">,</span><span class="token boolean">true</span>End SubSub <span class="token function">AddInstDirToSystemPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    pathname <span class="token operator">=</span> installdir <span class="token operator">&amp;</span> <span class="token string">";"</span>    Set sysenv <span class="token operator">=</span> shell<span class="token punctuation">.</span><span class="token function">environment</span><span class="token punctuation">(</span><span class="token string">"System"</span><span class="token punctuation">)</span>    If <span class="token function">InStr</span><span class="token punctuation">(</span><span class="token function">LCase</span><span class="token punctuation">(</span><span class="token function">sysenv</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">LCase</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> Then        <span class="token function">sysenv</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">)</span> <span class="token operator">=</span> pathname <span class="token operator">&amp;</span> <span class="token function">sysenv</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">)</span>    End If    extname <span class="token operator">=</span> <span class="token string">";.LNK"</span>    If <span class="token function">InStr</span><span class="token punctuation">(</span><span class="token function">LCase</span><span class="token punctuation">(</span><span class="token function">sysenv</span><span class="token punctuation">(</span><span class="token string">"PATHEXT"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">LCase</span><span class="token punctuation">(</span>extname<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span> Then        <span class="token function">sysenv</span><span class="token punctuation">(</span><span class="token string">"PATHEXT"</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sysenv</span><span class="token punctuation">(</span><span class="token string">"PATHEXT"</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> extname    End IfEnd SubSub <span class="token function">CreateSendToLnk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sendtodir <span class="token operator">=</span> shell<span class="token punctuation">.</span><span class="token function">specialfolders</span><span class="token punctuation">(</span><span class="token string">"SendTo"</span><span class="token punctuation">)</span>    lnkpath <span class="token operator">=</span> fso<span class="token punctuation">.</span><span class="token function">buildpath</span><span class="token punctuation">(</span>sendtodir<span class="token punctuation">,</span>installbase <span class="token operator">&amp;</span> <span class="token string">".lnk"</span><span class="token punctuation">)</span>    Set shortcut <span class="token operator">=</span> shell<span class="token punctuation">.</span><span class="token function">createshortcut</span><span class="token punctuation">(</span>lnkpath<span class="token punctuation">)</span>    shortcut<span class="token punctuation">.</span>targetpath <span class="token operator">=</span> installpath    shortcut<span class="token punctuation">.</span>saveEnd SubSub <span class="token function">CreateInstDirLnk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    lnkpath <span class="token operator">=</span> fso<span class="token punctuation">.</span><span class="token function">buildpath</span><span class="token punctuation">(</span>installdir<span class="token punctuation">,</span>fso<span class="token punctuation">.</span><span class="token function">getfolder</span><span class="token punctuation">(</span>installdir<span class="token punctuation">)</span><span class="token punctuation">.</span>name <span class="token operator">&amp;</span> <span class="token string">".lnk"</span><span class="token punctuation">)</span>    If Not fso<span class="token punctuation">.</span><span class="token function">fileexists</span><span class="token punctuation">(</span>lnkpath<span class="token punctuation">)</span> Then        Set shortcut <span class="token operator">=</span> shell<span class="token punctuation">.</span><span class="token function">createshortcut</span><span class="token punctuation">(</span>lnkpath<span class="token punctuation">)</span>        shortcut<span class="token punctuation">.</span>targetpath <span class="token operator">=</span> installdir        shortcut<span class="token punctuation">.</span>save    End IfEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用ScriptCryptor-转换为-winr-exe"><a href="#使用ScriptCryptor-转换为-winr-exe" class="headerlink" title="使用ScriptCryptor 转换为 winr.exe"></a>使用ScriptCryptor 转换为 winr.exe</h4><h4 id="设置右键菜单"><a href="#设置右键菜单" class="headerlink" title="设置右键菜单"></a>设置右键菜单</h4><pre class="line-numbers language-java"><code class="language-java">在注册表 folder 下创建右键  command 为 E<span class="token operator">:</span>\worksoft\inkpath\winr<span class="token punctuation">.</span>exe <span class="token string">"%V"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="注册表说明"><a href="#注册表说明" class="headerlink" title="注册表说明"></a>注册表说明</h2><pre class="line-numbers language-java"><code class="language-java">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell  下创建  对文件夹生效<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">计算机\HKEY_CLASSES_ROOT\<span class="token operator">*</span>\shell 下  对 文件<span class="token punctuation">(</span><span class="token punctuation">.</span>txt   <span class="token punctuation">.</span>docx<span class="token punctuation">)</span>生效<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="folder-和-directory-区别"><a href="#folder-和-directory-区别" class="headerlink" title="folder 和 directory 区别"></a>folder 和 directory 区别</h3><pre class="line-numbers language-java"><code class="language-java">在 Windows 系统中，我们经常会见到「目录」和「文件夹」两个名词，但很多人会这两个概念混用，甚至搞不清楚它们的区别，包括写这篇博文的我，之前也是一样。同样表示「文件夹」的概念，为什么会有两个说法？事实上，这两个词不仅仅是在中文中，在英文原文中，也是有两个不同的词汇，Directory 和 Folder。通常，Directory 被翻译成「目录」，而 Folder 被翻译成「文件夹」。但实际的情况是，很多情况下，这两个的翻译都比较混乱，Directory 也经常被翻译为「文件夹」。那么微软使用 Directory 和 Folder 这两个名词到底什么不同的意义和差异呢？这个问题我多年也没搞清楚，直到最近又在网上搜索资料，并自己进行一些测试后，才发现他们的细微差别。首先，作为一个 Windows 开发人员，注册表、文件关联等都应该是了解的。那么大家应该都知道，在 Windows 的注册表编辑器中的 HKEY_CLASSES_ROOT 节点下面，有 Directory 和 Folder 两个子键，类似其他的 ProgId 子键，支持在其 shell 子键添加自定义的动作和命令。有一天我突发奇想，如果我分别在这两个位置添加一个动作项，系统该如何显示它们？于是我分别在不同的位置单独添加注册表项，然后观察右键菜单，发现了其中的秘密：仅在 HKEY_CLASSES_ROOTDirectoryshell 下面随便添加一个节点，如 action，我分别在「计算机」、「回收站」、「计算机」中的任意驱动器、普通文件夹上点击右键，只有普通的文件夹右键菜单中出现了 action 这一菜单项。仅在 HKEY_CLASSES_ROOTFoldershell 下面随便添加一个节点，如 action，我分别在「计算机」、「回收站」、「计算机」中的任意驱动器、普通文件夹上点击右键，所有这些项目的右键菜单中均出现了 action 这一菜单项。仅在 HKEY_CLASSES_ROOTDriveshell 下面随便添加一个节点，如 action，我分别在「计算机」、「回收站」、「计算机」中的任意驱动器、普通文件夹上点击右键，只有驱动器盘符右键菜单中出现了 action 这一菜单项。如此看来，Folder 的范围其实是很大的，它包括了系统中所有可以双击打开并查看其内容的「文件夹」项目，包括「计算机」、「回收站」、「控制面板」等这些虚拟文件夹，以及「计算机」中的所有磁盘驱动器，以及其中的任何文件夹 <span class="token punctuation">(</span>Directory<span class="token punctuation">)</span>。而 Directory 的概念则小的很多，它必须是存在于物理磁盘上的一个「文件夹」项目，而「计算机」中的所有磁盘驱动器，如「本地磁盘 <span class="token punctuation">(</span>C<span class="token operator">:</span><span class="token punctuation">)</span>」则不认为是 Directory。总结：如果是开发外壳扩展 dll，最好根据需要写入到正确的子键下面，不要在 Directory 和 Folder 等子键下乱写一通。虽然有的外壳扩展不支持虚拟文件夹，写在 Directory 下系统也并不会加载，但还是希望各位开发人员能够正确遵守规范。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\添加到快捷方式<span class="token punctuation">]</span><span class="token string">"icon"</span><span class="token operator">=</span><span class="token string">"E:\\back\\Pictures\\icon\\damotouicon (6).ico"</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\添加到快捷方式\command<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"E:\\worksoft\\inkpath\\winr.exe \"%V\""</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\open_cmd<span class="token punctuation">]</span><span class="token string">"icon"</span><span class="token operator">=</span><span class="token string">"C:\\Windows\\System32\\cmd.exe"</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Folder\shell\open_cmd\command<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"\"C:\\Windows\\System32\\cmd.exe\" \"cd %1\""</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\open_cmd<span class="token punctuation">]</span><span class="token string">"icon"</span><span class="token operator">=</span><span class="token string">"C:\\Windows\\System32\\cmd.exe"</span><span class="token punctuation">[</span>HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Directory\background\shell\open_cmd\command<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"\"C:\\Windows\\System32\\cmd.exe\""</span><span class="token punctuation">[</span>HKEY_CLASSES_ROOT\<span class="token operator">*</span>\shell\添加到快捷命令<span class="token punctuation">]</span><span class="token string">"icon"</span><span class="token operator">=</span><span class="token string">"E:\\back\\Pictures\\icon\\damotouicon (6).ico"</span><span class="token punctuation">[</span>HKEY_CLASSES_ROOT\<span class="token operator">*</span>\shell\添加到快捷命令\command<span class="token punctuation">]</span>@<span class="token operator">=</span><span class="token string">"E:\\worksoft\\inkpath\\winr.exe \"%V\""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/hexo/posts/undefined/"/>
      <url>/hexo/posts/undefined/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客图片访问问题</title>
      <link href="/hexo/posts/27999/"/>
      <url>/hexo/posts/27999/</url>
      
        <content type="html"><![CDATA[<h2 id="图片访问问题解决"><a href="#图片访问问题解决" class="headerlink" title="图片访问问题解决"></a>图片访问问题解决</h2><p>博客图片的存储可是采用图床或则直接发布到github 仓库,下面介绍几种发布到github仓库的方式。</p><blockquote><p>仓库存储图片面临发布之后图片访问失败的问题， 下面主要解决博客发布后图片访问路径</p></blockquote><p>一般hexo博客部署发布后根据配置文件<code>_config.xml</code>属性 <code>permalink: :title/  #default :year/:month/:day/:title/</code></p><p>访问路径应该类似 **<a href="http://localhost:4000/hexo2/2024/07/04/test/**%E5%8C%85%E5%90%AB%E6%97%A5%E6%9C%9F%E4%BF%A1%E6%81%AF%E3%80%82%E8%80%8C%E5%9B%BE%E7%89%87%E7%9A%84%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5%E5%B0%B1%E5%92%8C%E8%BF%99%E4%B8%AA%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9A%84%E6%97%A5%E6%9C%9F%E8%B7%AF%E5%BE%84%E6%9C%89%E5%85%B3%E7%B3%BB%E3%80%82">http://localhost:4000/hexo2/2024/07/04/test/**包含日期信息。而图片的访问失败就和这个自动生成的日期路径有关系。</a></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><blockquote><p>安装插件 hexo-asset-image</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/405551874">[Hexo博客搭建]第4章 Hexo图片显示问题</a></p><p><a href="https://blog.csdn.net/cnds123321/article/details/109085776">解决Hexo关于图片的问题</a></p><p><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法</a></p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>安装插件</p><pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>配置文件</p><pre><code>_config.yml` 文件中的`post_asset_folder` 选项设为 `true目的 可以生成 md文件的同名文件夹</code></pre><p>修改 typora 偏好设置 在统同级博客文件下 生成博客同名文件夹存储照片</p><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703180647089.png" alt="image-20240703180647089"></p><p>插件作用 在生成静态文件时，可已经缺失的 日期路径进行补充</p><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/image-20240703180835748.png" alt="image-20240703180835748"></p><h4 id="插件hexo-image-link"><a href="#插件hexo-image-link" class="headerlink" title="插件hexo-image-link"></a>插件hexo-image-link</h4><blockquote><p>原理: 在Hexo启用<code>post_asset_folder: true</code>选项后，将Markdown语法的图片路径转换为asset_img的方式，使图片能够在使用typora编辑和hexo预览发布时都能正常显示。</p><p><a href="https://github.com/cocowool/hexo-image-link">https://github.com/cocowool/hexo-image-link</a></p><p>就如补充中提到的  如果你不需要频繁的更换文件名, 也是可以用这个插件的。</p></blockquote><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>利用hexo 自带插件  hexo-renderer-marked   <a href="https://hexo.io/zh-cn/docs/asset-folders">https://hexo.io/zh-cn/docs/asset-folders</a></p></blockquote><p>修改配置文件</p><pre><code>_config.ymlpost_asset_folder: truemarked:  prependRoot: true  postAsset: true</code></pre><p>配置</p><pre><code> Front-matter  typora-root-url: test   (md文件名同级目录)</code></pre><p>启用后，资源图片将会被自动解析为其对应文章的路径。<br>例如： <code>image.jpg</code> 位置为 <code>/2020/01/02/foo/image.jpg</code> ，这表示它是 <code>/2020/01/02/foo/</code> 文章的一张资源图片， <code>![](image.jpg)</code> 将会被解析为 <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code> 。</p><blockquote><p>方法2原理和方法1类似 都是在生成静态文件时自动补全缺失的日期路径</p><p>但是 这种方式需要图片路径严格按照 &#x3D;&#x3D;image.jpg&#x3D;&#x3D; 形式;</p><p>不能是这种形式 &#x3D;&#x3D;&#x2F;image.jpg&#x3D;&#x3D;  (typore 自动插入图片即是这种形式)。</p><p>所以没有使用该种方式</p></blockquote><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p><a href="https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">typora + hexo博客中插入图片</a></p><p><a href="https://rainylog.com/post/hexo-post-image-manage/">Hexo 文章图片管理</a></p><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/1567505538899-1720084585925.png" alt="1567505538899"></p><p>在typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>hexo/source</code>作为其根目录即可。</p><blockquote><p>这一步就是在文件 Front-matter 中添加属性 &#x3D;&#x3D;typora-root-url: ..&#x3D;&#x3D;</p></blockquote><p><strong>一定要先设置了图片根目录后再插入图片，否则图片路径会不正确喔！</strong></p><blockquote><p>将静态文件放入 hexo  source 文件夹下,免去了日期路径的困扰,</p><p>而且在此路径下也避免了 _post博客文件中静态资源部署需要 先clean  在 generate的繁琐。</p></blockquote><h3 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h3><p><a href="https://www.cnblogs.com/immaxfang/p/17068846.html">Hexo 修改默认文章路径</a></p><p>既然问题是因为日期路径引起的那么不使用日志路径不就可以了吗.</p><pre><code>_config.ymlpermalink: :title/  #default :year/:month/:day/:title/</code></pre><p>修改  typora <code>图片偏好设置</code> 为 <code>复制到指定路径</code>   <code>./$&#123;filename&#125;</code></p><blockquote><p>方法四设置简单,但是静态文件发布后 所有的文件夹都集中在一起, 如果文件名区分的不好,可能会造成post 和 page重名,</p><p>建议文件取名的时候添加日期属性<code>2024-07-04test.md</code>  或则采用方法三。</p></blockquote><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/image-20240704172502202.png" alt="image-20240704172502202"></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ul><li><p>总是有新问题出现, 此种方式只能解决<code>_posts</code>文件夹下的图片链接问题  , 如果在<code>_posts</code>下新建文件夹,就会失效,</p><p>例如: 我在 _posts 下新建的  hexo文件夹 存储hexo相关的博文 就会造成图片失效</p></li><li><p>当然也有解决办法</p></li></ul><pre><code>Front-matter typora-root-url: ..   图像根路径设置为`_post`即可</code></pre><blockquote><p>但是这样总是临时措施,如果想变回 时间访问路径<code>permalink: :title/  #default :year/:month/:day/:title/</code> 还是会有问题</p><p>所以结论是 方法不太完美.</p></blockquote><h4 id="补充二"><a href="#补充二" class="headerlink" title="补充二"></a>补充二</h4><blockquote><p>如果md 文件名变动了 例如   test.md  变成了  testnote.md , 在  <code>hexo g</code> 生成 文件时, </p><p>public 文件夹中不会生成   test 文件夹的照片,只会有 testnode文件夹下的照片,</p><ul><li>推测hexo根据md文件名来生成文件夹</li></ul></blockquote><h3 id="补充三"><a href="#补充三" class="headerlink" title="补充三"></a>补充三</h3><blockquote><p>最后采用 方案三; </p><p>之前一直在研究方案四, 因为typero设置图片复制时放在md同级目录下,迁移时方便,</p><p>现在老是产生一些图片访问失败的问题  只能采用方案三了.</p></blockquote><h3 id="补充四"><a href="#补充四" class="headerlink" title="补充四"></a>补充四</h3><ul><li>新问题出现了,图片本地能够编辑, 如过在 github仓库编辑md 图片不会显示</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/hexo/posts/afcbc60d/"/>
      <url>/hexo/posts/afcbc60d/</url>
      
        <content type="html"><![CDATA[<h2 id="1-hexo-安装"><a href="#1-hexo-安装" class="headerlink" title="1.hexo 安装"></a>1.hexo 安装</h2><p>安装前需要准备好npm环境</p><pre class="line-numbers language-java"><code class="language-java">安装hexo客户端npm i hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g  #在空白文件夹下穿件hexo项目hexo init项目运行hexo s <span class="token punctuation">[</span><span class="token operator">-</span>p <span class="token number">5000</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-主题安装"><a href="#2-主题安装" class="headerlink" title="2.主题安装"></a>2.主题安装</h2><p>​选择主题时浪费了很多时间,   主要研究了<a href="https://butterfly.js.org/">butterfly</a>主题,我需要的是一个简单配置就能使用的博客,不需要在页面配置上浪费大量精力. 或许以后熟练使用hexo了 可以考虑研究下.</p><p>​     最后选定了 <a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">matery</a> 主题, 安装时会有些小问题</p><blockquote><p>主题安装</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery themes/matery</code></pre><p>我安装上述方式安装,最后部署githubpage时 部署失败.</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><p>最后采用了在github 下载压缩包 然后 复制解压到 themes 文件夹下的方式安装主题</p><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703180115686.png" alt="image-20240703180115686"></p></blockquote><blockquote><p>主题设置按照<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">matery</a> 教程中设置, 实现了文章全文搜索,和文章字数统计.</p><p>评论设置一直有问题,未能解决,</p></blockquote><h2 id="3-github-部署"><a href="#3-github-部署" class="headerlink" title="3.github 部署"></a>3.github 部署</h2><h3 id="githuppage准备"><a href="#githuppage准备" class="headerlink" title="githuppage准备"></a>githuppage准备</h3><pre><code>注册githup 账号  创建github仓库 仓库名称必须设置为  你的名字.github.io (liudongsir.github.io)如果是单纯设置博客,仓库名可以随便设置; 例如我一开始使用的hexo仓库部署但是这么做会影响下面的图片部署.</code></pre><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703181034779.png" alt="image-20240703181034779"></p><p> <img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703181203043.png" alt="image-20240703181203043"></p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><blockquote><p>首先需要安装发布的插件， 插件发布项目需要用到 github  ssh连接方式, 提前配置好ssh key</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>deployer<span class="token punctuation">-</span>git <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><blockquote><p>hexo 配置文件 _config.yml 设置如下图</p></blockquote><p> <img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703181034779.png" alt="image-20240703181034779"></p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><pre class="line-numbers language-java"><code class="language-java"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 也可以直接输入此命令，直接完成渲染和上传hexo g <span class="token operator">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-图片部署"><a href="#4-图片部署" class="headerlink" title="4.图片部署"></a>4.图片部署</h2><p>图片部署有多种方式, 1 通过图床上传图片到oss服务器(常用),2同步图片到仓库直接访问.</p><p><del>我采用的方式2</del>最终采用<a href="https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">该方式</a>主要因为文件名变动,该方式不需要再次调整图片路径.</p><p>方式2的参考链接</p><p><a href="https://zhuanlan.zhihu.com/p/405551874">[Hexo博客搭建]第4章 Hexo图片显示问题</a></p><p><a href="https://blog.csdn.net/cnds123321/article/details/109085776">解决Hexo关于图片的问题</a></p><p><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法</a></p><p>一些其他解决思路</p><p><a href="https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">typora + hexo博客中插入图片</a></p><p><a href="https://rainylog.com/post/hexo-post-image-manage/">Hexo 文章图片管理</a></p><blockquote><p>修改配置文件</p></blockquote><pre><code>_config.yml` 文件中的`post_asset_folder` 选项设为 `true目的 可以生成 md文件的同名文件夹</code></pre><pre><code>编写博客(md)使用 typora 在偏好设置中如图设置:</code></pre><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703180647089.png" alt="image-20240703180647089"></p><blockquote><p>安装图片处理插件</p></blockquote><pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save在hexo g  时可以复制图片到生成的静态文件(html) 同级目录中,并且图片路径也对应处理.</code></pre><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703180835748.png" alt="image-20240703180835748"></p><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5.参考链接"></a>5.参考链接</h2><p><a href="https://blog.csdn.net/victoryxa/article/details/103733655">hexo+github搭建博客(超级详细版，精细入微)</a></p><p><a href="https://blog.csdn.net/qq_58608526/article/details/124652412">Hexo+Github博客搭建教程</a></p><h2 id="6-后记"><a href="#6-后记" class="headerlink" title="6.后记"></a>6.后记</h2><p>​博客还有很多内容可以设置</p><ul><li>本地搜索</li><li>代码格式化</li><li>github  action 自动化部署</li></ul><blockquote><p>安装matery 主题用到的其他插件</p><pre class="line-numbers language-yaml"><code class="language-yaml">npm i  hexo<span class="token punctuation">-</span>prism<span class="token punctuation">-</span>plugin <span class="token punctuation">-</span>Snpm i hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>search <span class="token punctuation">-</span><span class="token punctuation">-</span>savenpm i hexo<span class="token punctuation">-</span>permalink<span class="token punctuation">-</span>pinyin <span class="token punctuation">-</span><span class="token punctuation">-</span>savenpm i <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/back-title.jpg" alt="back-title"></p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/hexo/posts/31415/"/>
      <url>/hexo/posts/31415/</url>
      
        <content type="html"><![CDATA[<h2 id="1-hexo-安装"><a href="#1-hexo-安装" class="headerlink" title="1.hexo 安装"></a>1.hexo 安装</h2><p>安装前需要准备好npm环境</p><pre class="line-numbers language-java"><code class="language-java">安装hexo客户端npm i hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g  #在空白文件夹下穿件hexo项目hexo init项目运行hexo s <span class="token punctuation">[</span><span class="token operator">-</span>p <span class="token number">5000</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-主题安装"><a href="#2-主题安装" class="headerlink" title="2.主题安装"></a>2.主题安装</h2><p>​ <del>选择主题时浪费了很多时间,   主要研究了steller, <a href="https://butterfly.js.org/">butterfly</a>主题,我需要的是一个简单配置就能使用的博客,不需要在页面配置上浪费大量精力. 或许以后熟练使用hexo了 可以考虑研究下.</del></p><p>​     最后选定了 <a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">matery</a> 主题, 安装时会有些小问题</p><blockquote><p>主题安装</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery themes/matery</code></pre><p>我安装上述方式安装,最后部署githubpage时 部署失败.</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><p>最后采用了在github 下载压缩包 然后 复制解压到 themes 文件夹下的方式安装主题</p><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703180115686.png" alt="image-20240703180115686"></p></blockquote><blockquote><p>主题设置按照<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">matery</a> 教程中设置, 实现了文章全文搜索,和文章字数统计.</p><p>评论设置一直有问题,未能解决,</p></blockquote><h2 id="3-github-部署"><a href="#3-github-部署" class="headerlink" title="3.github 部署"></a>3.github 部署</h2><h3 id="githuppage准备"><a href="#githuppage准备" class="headerlink" title="githuppage准备"></a>githuppage准备</h3><pre><code>注册githup 账号  创建github仓库 仓库名称必须设置为  你的名字.github.io (liudongsir.github.io)如果是单纯设置博客,仓库名可以随便设置; 例如我一开始使用的hexo仓库部署但是这么做会影响下面的图片部署.</code></pre><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2/image-20240703181034779.png" alt="image-20240703181034779"></p><p> <img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240703181203043-1720155729349.png" alt="image-20240703181203043"></p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><blockquote><p>首先需要安装发布的插件， 插件发布项目需要用到 github  ssh连接方式, 提前配置好ssh key</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml">npm install hexo<span class="token punctuation">-</span>deployer<span class="token punctuation">-</span>git <span class="token punctuation">-</span><span class="token punctuation">-</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><blockquote><p>hexo 配置文件 _config.yml 设置如下图</p></blockquote><p> <img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240703181034779-1720155733933.png" alt="image-20240703181034779"></p><h3 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h3><pre class="line-numbers language-java"><code class="language-java"># Hexo会根据配置文件渲染出一套静态页面hexo g# 将上一步渲染出的一系列文件上传至至Github Pageshexo d# 也可以直接输入此命令，直接完成渲染和上传hexo g <span class="token operator">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-图片部署"><a href="#4-图片部署" class="headerlink" title="4.图片部署"></a>4.图片部署</h2><blockquote><p>图片部署参看文章  <a href="hexo2/hexo/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/">cesh</a>    <a href="/hexo/hexo/2024-07-03hexo-bo-ke-tu-pian-fang-wen-wen-ti/" title="hexo博客图片访问问题">博客图片访问问题</a></p></blockquote><p>图片部署有多种方式, 1 通过图床上传图片到oss服务器(常用),2同步图片到仓库直接访问.</p><p><del>我采用的方式2</del>最终采用<a href="https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">该方式</a>主要因为文件名变动,该方式不需要再次调整图片路径.</p><p>方式2的参考链接</p><p><a href="https://zhuanlan.zhihu.com/p/405551874">[Hexo博客搭建]第4章 Hexo图片显示问题</a></p><p><a href="https://blog.csdn.net/cnds123321/article/details/109085776">解决Hexo关于图片的问题</a></p><p><a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败——解决思路及个人最终解决办法</a></p><p>一些其他解决思路</p><p><a href="https://yinyoupoet.github.io/2019/09/03/hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/">typora + hexo博客中插入图片</a></p><p><a href="https://rainylog.com/post/hexo-post-image-manage/">Hexo 文章图片管理</a></p><blockquote><p>修改配置文件</p></blockquote><pre><code>_config.yml` 文件中的`post_asset_folder` 选项设为 `true目的 可以生成 md文件的同名文件夹</code></pre><pre><code>编写博客(md)使用 typora 在偏好设置中如图设置:</code></pre><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240703180647089-1720155739924.png" alt="image-20240703180647089"></p><blockquote><p>安装图片处理插件</p></blockquote><pre><code>npm install https://github.com/CodeFalling/hexo-asset-image --save在hexo g  时可以复制图片到生成的静态文件(html) 同级目录中,并且图片路径也对应处理.</code></pre><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20240703180835748-1720155743155.png" alt="image-20240703180835748"></p><h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5.参考链接"></a>5.参考链接</h2><p><a href="https://blog.csdn.net/victoryxa/article/details/103733655">hexo+github搭建博客(超级详细版，精细入微)</a></p><p><a href="https://blog.csdn.net/qq_58608526/article/details/124652412">Hexo+Github博客搭建教程</a></p><h2 id="6-后记"><a href="#6-后记" class="headerlink" title="6.后记"></a>6.后记</h2><p>博客还有很多内容可以设置</p><p>本地搜索</p><p>代码格式化</p><p>github  action 自动化部署</p><h4 id="安装matery-主题用到的其他插件"><a href="#安装matery-主题用到的其他插件" class="headerlink" title="安装matery 主题用到的其他插件"></a>安装matery 主题用到的其他插件</h4><blockquote><pre class="line-numbers language-yaml"><code class="language-yaml">npm i  hexo<span class="token punctuation">-</span>prism<span class="token punctuation">-</span>plugin <span class="token punctuation">-</span>Snpm i hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>search <span class="token punctuation">-</span><span class="token punctuation">-</span>savenpm i hexo<span class="token punctuation">-</span>permalink<span class="token punctuation">-</span>pinyin <span class="token punctuation">-</span><span class="token punctuation">-</span>savenpm i <span class="token punctuation">-</span><span class="token punctuation">-</span>save hexo<span class="token punctuation">-</span>wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>本项目部署到hexosource 仓库, 博客发布到hexo仓库</strong></p><p><img src="/hexo/images/2024-07-03hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/back-title-1720155751017.jpg" alt="back-title"></p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建(转载)</title>
      <link href="/hexo/posts/55908/"/>
      <url>/hexo/posts/55908/</url>
      
        <content type="html"><![CDATA[<h1 id="HEXO-博客搭建"><a href="#HEXO-博客搭建" class="headerlink" title="HEXO 博客搭建"></a>HEXO 博客搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文章 转自  <a href="https://winward-king.github.io/tags/hexo/">Winward King</a></p></blockquote><h2 id="软件与平台"><a href="#软件与平台" class="headerlink" title="软件与平台"></a>软件与平台</h2><h3 id="必须的软件："><a href="#必须的软件：" class="headerlink" title="必须的软件："></a>必须的软件：</h3><ul><li>NODE.JS</li><li>GIT</li></ul><h3 id="博客编写的软件"><a href="#博客编写的软件" class="headerlink" title="博客编写的软件"></a>博客编写的软件</h3><ul><li>Visual Studio Code（推荐）</li><li>TYPORA</li></ul><h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><ul><li>node.js 和 Typoro、Git，一路<code>下一步</code>就行了。</li><li>VSCode 安装好之后默认是英文界面，可以在插件市场里搜索 chinese，安装之后重启软件，变成中文版。</li></ul><h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><ul><li><p>Windows 下用 Win + R 打开运行，输入 cmd 并进入 cmd 窗口查询</p></li><li><p>Mac 下打开终端，进行查询</p></li><li><p>右键打开 Git bash，输入命令查询</p></li><li><p>node.js 版本的检查</p><figure class="highlight cmd"><div class="highlight-tools "><div class="code-lang"> cmd</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">node -v</span></pre></td></tr></tbody></table></figure></li><li><p>npm 版本的检查 (NPM 是随同 NodeJS 一起安装的包管理工具，能解决 NodeJS 代码部署上的很多问题)。</p><figure class="highlight cmd"><div class="highlight-tools "><div class="code-lang">cmd</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm -v</span></pre></td></tr></tbody></table></figure></li><li><p>Git 版本的检查</p><figure class="highlight cmd"><div class="highlight-tools "><div class="code-lang"> cmd</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">git --version</span></pre></td></tr></tbody></table></figure></li></ul><h2 id="HEXO-的安装"><a href="#HEXO-的安装" class="headerlink" title="HEXO 的安装"></a>HEXO 的安装</h2><p>在 Git bash 或者 CMD 界面执行命令</p><ul><li><p>安装之前可以先设置一下淘宝镜像加速器 (国内访问镜像站快一点)</p><figure class="highlight cmd"><div class="highlight-tools "><div class="code-lang">cmd</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span></pre></td></tr></tbody></table></figure></li><li><p>全局安装框架</p><figure class="highlight cmd"><div class="highlight-tools "><div class="code-lang"> cmd</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span></pre></td></tr></tbody></table></figure></li><li><p>创建自己的博客目录并安装博客</p><figure class="highlight cmd"><div class="highlight-tools "><div class="code-lang"> cmd</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo init 博客的根目录名字</span></pre></td></tr></tbody></table></figure></li><li><p>进入博客的目录</p><figure class="highlight cmd"><div class="highlight-tools "><div class="code-lang"> cmd</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客的根目录名字</span></pre></td></tr></tbody></table></figure></li><li><p>安装 npm 依赖环境</p><figure class="highlight cmd"><div class="highlight-tools "><div class="code-lang"> cmd</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install</span></pre></td></tr></tbody></table></figure></li><li><p>安装 Hexo (Git) 部署插件</p></li></ul><p>请在博客的目录下启动 Git bash，再执行以下代码</p><figure class="highlight bash"><div class="highlight-tools "><div class="code-lang">bash</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span></pre></td></tr></tbody></table></figure><h2 id="HEXO-常用代码"><a href="#HEXO-常用代码" class="headerlink" title="HEXO 常用代码"></a>HEXO 常用代码</h2><p>清理缓存，会自动删除博客目录下得 public 文件。(hexo cl 是 hexo clean 的简写)</p><figure class="highlight bash"><div class="highlight-tools "><div class="code-lang">bash</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo cl </span></pre></td></tr></tbody></table></figure><figure class="highlight bash"><div class="highlight-tools "><div class="code-lang">bash</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo clean</span></pre></td></tr></tbody></table></figure><p>生成静态页面，重新生成 public 文件。（hexo g 是 hexo generate 的简写)</p><figure class="highlight bash"><div class="highlight-tools "><div class="code-lang">bash</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo g </span></pre></td></tr></tbody></table></figure><p>启动本地服务，在 <a href="http://localhost:4000/">http://localhost:4000/</a> 预览效果。（hexo s 是 hexo server 的简写）<br>如果是挂载在群晖等内网系统用 <a href="http://192.168.xxx.xxx:4000，注意端口号是否被占用">http://192.168.xxx.xxx:4000，注意端口号是否被占用</a></p><figure class="highlight bash"><div class="highlight-tools "><div class="code-lang"> bash</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo s <span class="comment">#或者hexo server</span></span></pre></td></tr></tbody></table></figure><p>部署推送，部署到 github。（hexo d 是 hexo deploy 的简写）</p><figure class="highlight bash"><div class="highlight-tools "><div class="code-lang">bash</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo d</span></pre></td></tr></tbody></table></figure><p>以上连写示例一（清理缓存 + 生成静态页面 + 在本地预览）</p><figure class="highlight bash"><div class="highlight-tools "><div class="code-lang">bash</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s</span></pre></td></tr></tbody></table></figure><p>以上连写示例二（清理缓存 + 生成静态页面 + 部署推送）</p><figure class="highlight bash"><div class="highlight-tools "><div class="code-lang">bash</div><div class="copy-notice"></div></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span></pre></td></tr></tbody></table></figure><h2 id="HEXO-博客的基础环境搭建完成"><a href="#HEXO-博客的基础环境搭建完成" class="headerlink" title="HEXO 博客的基础环境搭建完成"></a>HEXO 博客的基础环境搭建完成</h2><p>HEXO 博客主题配置</p><h1 id="博客配置-GIT-及备份"><a href="#博客配置-GIT-及备份" class="headerlink" title="博客配置 GIT 及备份"></a>博客配置 GIT 及备份</h1><article class="post-content" id="article-container"><h2 id="博客的-Git-配置"><a href="#博客的-Git-配置" class="headerlink" title="博客的 Git 配置"></a>博客的 Git 配置</h2><ul><li>Git 的配置与使用，可以参考我另一篇文章，在此不在赘述。</li><li>Git 配置与使用</li></ul><h2 id="Hexo-Github-配置"><a href="#Hexo-Github-配置" class="headerlink" title="Hexo Github 配置"></a>Hexo Github 配置</h2><ul><li>创建一个仓库，名为：自己用户名 + .github.io</li></ul><pre><code>#例如我的就是winward-king.github.io</code></pre><h2 id="修改博客-config-yml-文件的配置"><a href="#修改博客-config-yml-文件的配置" class="headerlink" title="修改博客 _config.yml 文件的配置"></a>修改博客 _config.yml 文件的配置</h2><ol><li>打开博客根目录的 _config.yml 文件，找到下面这个位置</li></ol><pre><code># Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  repo:    github: https://github.com/自己用户名/自己用户名.github.io.git  branch: master #</code></pre><ul><li>将以下信息添加到 <code>repo:</code> 里面去，main or master 选择对应的分支</li></ul><pre><code>https://自己用户名.github.io</code></pre><ol><li>修改主题链接的 URL</li></ol><pre class="line-numbers language-xml"><code class="language-xml"># URL## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'url: https://winward-king.github.io/ #替换成你自己的链接permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks  trailing_html: true # Set to false to remove trailing '.html' from permalinks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="博客的备份"><a href="#博客的备份" class="headerlink" title="博客的备份"></a>博客的备份</h2><ol><li>在 Github 上创建一个仓库，名字随便</li><li>通过 Git 命令推送，并保持更新</li><li>配置<code>.gitignore</code></li></ol><pre><code>.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/_multiconfig.yml</code></pre><h1 id="运维博客常用网站汇总"><a href="#运维博客常用网站汇总" class="headerlink" title="运维博客常用网站汇总"></a>运维博客常用网站汇总</h1><h2 id="博客框架文档"><a href="#博客框架文档" class="headerlink" title="博客框架文档"></a>博客框架文档</h2><ul><li>hexo - 中文文档<br><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li></ul><h2 id="butterfly-主题文档"><a href="#butterfly-主题文档" class="headerlink" title="butterfly 主题文档"></a>butterfly 主题文档</h2><ul><li>butterfly 主题中文文档<br><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></li><li>butterfly 主题 Github 项目地址<br><a href="https://github.com/jerryc127/butterfly.js.org">https://github.com/jerryc127/butterfly.js.org</a></li><li>主题开发者适配的插件<br><a href="https://github.com/jerryc127/butterfly-plugins">https://github.com/jerryc127/butterfly-plugins</a></li></ul><h2 id="图标网站"><a href="#图标网站" class="headerlink" title="图标网站"></a>图标网站</h2><ul><li><p>fontawesome - 图标库<br><a href="https://fontawesome.com/icons?from=io">https://fontawesome.com/icons?from=io</a></p></li><li><p>iconfont - 阿里巴巴矢量图标库<br><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p></li></ul><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><ul><li>tiny - 图片无损压缩<br><a href="https://tinypng.com/">https://tinypng.com/</a></li></ul><h2 id="文档处理"><a href="#文档处理" class="headerlink" title="文档处理"></a>文档处理</h2><ul><li><p>HTML 与 Markdown 转换<br><a href="https://www.bejson.com/convert/html2markdown/">https://www.bejson.com/convert/html2markdown/</a></p></li><li><p>HTML 转为 JADE&#x2F;PUG<br><a href="http://html2jade.org/">http://html2jade.org/</a></p></li></ul><h2 id="评论区管理"><a href="#评论区管理" class="headerlink" title="评论区管理"></a>评论区管理</h2><ul><li>twikoo<br><a href="https://twikoo.js.org/">https://twikoo.js.org/</a></li><li>mongodb<br><a href="https://cloud.mongodb.com/">https://cloud.mongodb.com/</a></li><li>vercel<br><a href="https://vercel.com/login">https://vercel.com/login</a></li></ul><h2 id="云服务"><a href="#云服务" class="headerlink" title="云服务"></a>云服务</h2><ul><li><p>腾讯云<br><a href="https://cloud.tencent.com/">https://cloud.tencent.com/</a></p></li><li><p>阿里云<br><a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p></li><li><p>又拍云<br><a href="https://console.upyun.com/">https://console.upyun.com/</a></p></li><li><p>jsDelivr<br><a href="https://www.jsdelivr.com/">https://www.jsdelivr.com/</a></p></li></ul><h1 id="拓展使用"><a href="#拓展使用" class="headerlink" title="拓展使用"></a>拓展使用</h1><h2 id="引用站内文章"><a href="#引用站内文章" class="headerlink" title="引用站内文章"></a>引用站内文章</h2><h3 id="post-link"><a href="#post-link" class="headerlink" title="post_link"></a>post_link</h3><p>在写文章的过程中，有时候需要引用站内的其他文章。可以通过内置的标签插件的语法 post_link 来实现引用。<br>这里默认的路径是在 _post 路径下，如果不是默认路径，需要写上相对路径。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><pre><code>&#123;% post_link '文章文件名(不要后缀)' '文章标题(可选)' %&#125;</code></pre><h4 id="实例-链接使用文章的标题"><a href="#实例-链接使用文章的标题" class="headerlink" title="实例 - 链接使用文章的标题"></a>实例 - 链接使用文章的标题</h4><pre><code>&#123;% post_link 'Hexo/01hello-world' %&#125;</code></pre><h4 id="实例-链接使用自定义文字"><a href="#实例-链接使用自定义文字" class="headerlink" title="实例 - 链接使用自定义文字"></a>实例 - 链接使用自定义文字</h4><pre><code>&#123;% post_link 'Hexo/01hello-world' '你好，世界' %&#125;</code></pre><h3 id="post-path"><a href="#post-path" class="headerlink" title="post_path"></a>post_path</h3><p>用来获取文章的链接地址，但是不是链接<br>可以用 markdown 语法直接插入文件链接，也很方便。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><pre><code>&#123;% post_path filename %&#125;</code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre><code>&#123;% post_path Hexo/01hello-world %&#125;[你好，世界](/2022/02/15/Hexo/01hello-world/)</code></pre><h3 id="hexo-链接到站内文章指定锚点"><a href="#hexo-链接到站内文章指定锚点" class="headerlink" title="hexo 链接到站内文章指定锚点"></a>hexo 链接到站内文章指定锚点</h3><h4 id="当前文章锚点跳转"><a href="#当前文章锚点跳转" class="headerlink" title="当前文章锚点跳转"></a>当前文章锚点跳转</h4><pre><code>[跳转到本文锚点](#hexo-标题与-id-关系)</code></pre><h4 id="站内文章跳转"><a href="#站内文章跳转" class="headerlink" title="站内文章跳转"></a>站内文章跳转</h4><pre><code>&lt;a href=&quot;&#123;% post_path 'hexo blog' %&#125;#安装&quot;&gt;hexo 安装&lt;/a&gt;</code></pre><h4 id="站外文章锚点"><a href="#站外文章锚点" class="headerlink" title="站外文章锚点"></a>站外文章锚点</h4><pre><code>[标题](网址)</code></pre><h4 id="其他更多标签用法"><a href="#其他更多标签用法" class="headerlink" title="其他更多标签用法"></a>其他更多标签用法</h4><p><a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件（Tag Plugins）</a></p><h4 id="隐藏文字"><a href="#隐藏文字" class="headerlink" title="隐藏文字"></a>隐藏文字</h4><pre><code>&lt;div style=&quot;display:none&quot;&gt;&lt;/div&gt;</code></pre><div style="display:none"></div></article>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的博客框架</title>
      <link href="/hexo/posts/7361/"/>
      <url>/hexo/posts/7361/</url>
      
        <content type="html"><![CDATA[<p>简言之，Blog 就是以网络作为载体，简易迅速便捷地发布自己的心得，及时有效轻松地与他人进行交流，再集丰富多彩的个性化展示于一体的综合性平台。</p><h2 id="博客搭建的方式"><a href="#博客搭建的方式" class="headerlink" title="博客搭建的方式"></a>博客搭建的方式</h2><p>总体来说，Blog 搭建的方式可以分为静态博客和动态博客。顾名思义，静态博客：博文内容是通过文档（如：.md 文件等）记录的（一个独立的文件），通过生成工具编译成最终的 hml、css、js 等静态文件，然后部署在静态 Server 服务器上或 Web 托管至数据仓库（如：Github），即可在互联网中被访问，不需要数据库的支撑。动态博客：是以数据库技术为基础，其博文内容是通过数据库记录存储的，主要特点体现在交互性；动不是指网页中的页面元素或特效在动，而是与后台数据库进行交互和数据传递（如：注册登录、评论、用户管理等）。</p><p>常见的博客框架：</p><h2 id="静态框架"><a href="#静态框架" class="headerlink" title="静态框架"></a>静态框架</h2><p>Hexo (<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a>)</p><p>Hugo (<a href="https://www.gohugo.cn/">https://www.gohugo.cn/</a>)</p><p>VuePress (<a href="https://www.vuepress.cn/">https://www.vuepress.cn/</a>)</p><p>Jekyll (<a href="https://www.jekyll.com.cn/">https://www.jekyll.com.cn/</a>)</p><h2 id="动态框架"><a href="#动态框架" class="headerlink" title="动态框架"></a>动态框架</h2><p>WordPress (<a href="https://wordpress.org/">https://wordpress.org/</a>)</p><p>Typecho (<a href="https://typecho.org/">https://typecho.org/</a>)</p><p>Halo (<a href="https://halo.run/">https://halo.run/</a>)</p><p>Solo (<a href="https://b3log.org/solo/">https://b3log.org/solo/</a>)</p><h2 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo 是一个基于 Node.js 的快速、简洁且高效的静态博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。Hexo 具有丰富的主题、插件系统。</p><p>优点：</p><p>纯静态博客，部署简单、成本低廉、运行优化非常高效。<br>Hexo 静态博客框架可以在云端，也可以在本地电脑上甚至手机上。<br>Hexo 框架的博客网站没有网站后台，不存在后台安全漏洞的问题。<br>因为是纯静态的，几乎所有的 CDN 服务都可以完美的加速提升浏览速度。<br>搜索引擎对纯静态网站有天然的青睐度，收录、权重优先权明显。<br>纯静态网站会让网络攻击成本大大的增加也就是说纯静态网站被攻击的可能性更低了。</p><h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><p>Hugo 被称为是世界上最快的构建网站的框架。Hugo 是一个快速且现代的静态网站生成器，采用 Go 编程语言开发，Hugo 的设计目标是让创建网站重新变得有趣。Hugo 是一个通用的网站框架。从技术上讲，Hugo 是一个静态站点生成器。与动态构建页面的系统不同，Hugo 在创建或更新内容时构建页面。由于网站的浏览频率远高于编辑频率，因此 Hugo 旨在为您的网站最终用户提供最佳的浏览体验，并为网站作者提供理想的写作体验。使用 Hugo 构建的网站非常快速和安全。Hugo 构建的网站可以托管在任何地方，包括 Netlify、Heroku、GoDaddy、DreamHost、GitHub Pages、GitLab Pages、Surge、Aerobatic、Firebase、Google Cloud Storage、Amazon S3、Rackspace、Azure, 和 CloudFront，并且与 CDN 更配。Hugo 网站在运行时不需要数据库或依赖于诸如 Ruby、Python 或 PHP 等昂贵的运行时环境。我们认为 Hugo 是一个理想的网站创建工具，具有几乎即时的构建时间，能够在网站修改时即刻重建。</p><p>优点：</p><p>飞快的构建速度。在等待网站构建时有多无聊？Hugo 是同类中最快的工具。每个页面的构建时间小于一毫秒时，网站的平均构建时间不到一秒钟。<br>健壮的内容管理。灵活性为王。Hugo 是内容战略家的梦想。Hugo 支持无限的内容类型、分类、菜单、动态 API 驱动的内容等，所有这些都无需插件。<br>短代码 (shortcodes)。Hugo 短代增强了 Markdown 的能力。我们喜欢 Markdown 语法的漂亮、简洁，但有时我们需要更多的灵活性。Hugo 短代码满足了美观和灵活的需求。<br>内置模板。Hugo 提供的通用模式让您的工作迅速完成。Hugo 提供了预制的模板，可以快速完成 SEO、评论、统计和其他功能。一行代码，完成所有工作。<br>支持多语言和 i18n。原生支持多语言。Hugo 为多语言站点提供了完整的 i18n 支持，并且与 Hugo 用户喜欢的单语言站点的开发体验完全相同。<br>定制输出。HTML 够吗？Hugo 允许以多种格式输出您的内容，包括 JSON 或 AMP，并使您可以轻松创建自己的内容。</p><h3 id="VuePress"><a href="#VuePress" class="headerlink" title="VuePress"></a>VuePress</h3><p>VuePress 由两部分组成：第一部分是一个极简静态网站生成器 (opens new window)，它包含由 Vue 驱动的主题系统和插件 API，另一个部分是为书写技术文档而优化的默认主题，它的诞生初衷是为了支持 Vue 及其子项目的文档需求。每一个由 VuePress 生成的页面都带有预渲染好的 HTML，也因此具有非常好的加载性能和搜索引擎优化（SEO）。同时，一旦页面被加载，Vue 将接管这些静态内容，并将其转换成一个完整的单页应用（SPA），其他的页面则会只在用户浏览到的时候才按需加载。</p><p>事实上，一个 VuePress 网站是一个由 Vue (opens new window)、Vue Router (opens new window) 和 webpack (opens new window) 驱动的单页应用。如果你以前使用过 Vue 的话，当你在开发一个自定义主题的时候，你会感受到非常熟悉的开发体验，你甚至可以使用 Vue DevTools 去调试你的自定义主题。在构建时，我们会为应用创建一个服务端渲染（SSR）的版本，然后通过虚拟访问每一条路径来渲染对应的 HTML。这种做法的灵感来源于 Nuxt (opens new window) 的 nuxt generate 命令，以及其他的一些项目，比如 Gatsby (opens new window)。</p><p>优点：</p><p>简洁至上。以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。<br>Vue 驱动。享受 Vue + webpack 的开发体验，可以在 Markdown 中使用 Vue 组件，又可以使用 Vue 来开发自定义主题。<br>高性能。VuePress 会为每个页面预渲染生成静态的 HTML，同时，每个页面被加载的时候，将作为 SPA 运行。</p><p>Jekyll<br>Jekyll 是一个静态网站生成器。用你喜欢的标记语言书写内容并交给 Jekyll 处理，它将利用模板为你创建一个静态网站。你可以调整你想要的网址样式、在网站上显示哪些数据等等。jekyll 是一个简单的免费的 Blog 生成工具，类似 WordPress。但是和 WordPress 又有很大的不同，原因是 jekyll 只是一个生成静态网页的工具，不需要数据库支持。但是可以配合第三方服务，例如 Disqus。最关键的是 jekyll 可以免费部署在 Github 上，而且可以绑定自己的域名。</p><p>优点：</p><p>简单。无需数据库、评论功能或频繁的版本更新 — 只需关注你的内容。<br>静态。只用 Markdown、Liquid、HTML &amp; CSS g 就可以构建可部署的静态网站。<br>博客。原生支持自定义链接、分类、静态页、文章以及自定义布局。</p><h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p>WordPress 是一款能让您建立出色网站、博客或应用程序的开源软件。WordPress 是使用 PHP 语言开发的博客平台，用户可以在支持 PHP 和 MySQL 数据库的服务器上架设属于自己的网站。也可以把 WordPress 当作一个内容管理系统（CMS）来使用。WordPress 是一款个人博客系统，并逐步演化成一款内容管理系统软件，它是使用 PHP 语言和 MySQL 数据库开发的，用户可以在支持 PHP 和 MySQL 数据库的服务器上使用自己的博客。WordPress 有许多第三方开发的免费模板，安装方式简单易用。不过要做一个自己的模板，则需要你有一定的专业知识。比如你至少要懂的标准通用标记语言下的一个应用 HTML、CSS、PHP 等相关知识。</p><p>优点：</p><p>WordPress 功能强大、扩展性强、生态丰富，这主要得益于其插件众多，易于扩充功能，基本上一个完整网站该有的功能，通过其第三方插件都能实现所有功能。<br>wordpress 搭建的博客对 seo 搜索引擎友好，收录也快，排名靠前。<br>适合 DIY，如果你是喜欢丰富内容的网站，那么 wordpress 可以很好地符合你的胃口。<br>主题很多，网站上一大片都是 wordpress 的主题，各色各样，应有尽有！<br>wordpress 备份和网站转移比较方便，原站点使用站内工具导出后，使用 WordPress Importer 插件就能方便地将内容导入新网站。<br>wordpress 有强大的社区支持，有上千万的开发者贡献和审查 wordpress，所以 wordpress 是安全并且活跃的。</p><h3 id="Typecho"><a href="#Typecho" class="headerlink" title="Typecho"></a>Typecho</h3><p>Typecho 是由 type 和 echo 两个词合成的，来自于开发团队的头脑风暴。Typecho 基于 PHP5 开发，支持多种数据库，是一款内核强健﹑扩展方便﹑体验友好﹑运行流畅的轻量级开源博客程序。选用 Typecho，搭建独一无二个人网络日志发布平台，享受创作的快乐。</p><p>优点：</p><p>轻量高效。仅仅 7 张数据表，加上不足 400KB 的代码，就实现了完整的插件与模板机制。超低的 CPU 和内存使用率，足以发挥主机的最高性能。<br>先进稳定。原生支持 Markdown 排版语法，易读更易写。支持 BAE&#x2F;GAE&#x2F;SAE 等各类云主机，即使面对突如其来的高访问量，也能轻松应对。<br>简洁友好。精心打磨过的操作界面，依然是你熟悉的面孔，更多了一份成熟与贴心。每一个像素的剪裁，都只为离完美更进一步。</p><p>Halo<br>Halo 是一款基于 Java 语言，使用 Spring Boot 框架开发的博客系统，致力于打造最好的 Java 博客系统，且只想安安静静的做一个博客系统。</p><p>优点：</p><p>代码开源。我们的所有代码开源在 GitHub 上且处于积极维护状态，截止目前已经发布了 81 个版本。您也可以在上面提交您的问题或者参与代码贡献。<br>易于部署。采用了程序与用户配置分离的方式，迁移和备份成本大大降低。您只需要一条命令即可运行成功，同时也支持 Docker 部署。<br>REST API。提供了完善的 Content API 和 Admin API，你可以用于开发单页面模板，微信小程序，各种系统的插件等。<br>模板系统完善的模板系统，支持自定义配置，支持在线安装和更新。开发主题也十分方便，欢迎大家参与主题的开发。<br>附件系统。支持本地上传，阿里云 OSS &#x2F; 又拍云 OSS &#x2F; 七牛云 OSS&#x2F;SM.MS 等云存储，你可以更方便的管理你文章中的附件。<br>评论系统拥有独立的评论插件，使用 Vue 开发，只需在页面引入构建好的 JS 文件即可，完美地和主题相结合。目前已有多款评论组件，你可以非常方便的切换。</p><h3 id="Solo"><a href="#Solo" class="headerlink" title="Solo"></a>Solo</h3><p>Solo 是一款基于 Java 语言有后台管理的，小而美的博客系统，专为程序员设计</p><p>优点：</p><p>Markdown 编辑器支持三种编辑模式：所见即所得 &#x2F; 即时渲染 &#x2F; 分屏预览。<br>Hexo &#x2F; Jekyll &#x2F; Markdown 导入。<br>SQL &#x2F; JSON &#x2F; Markdown 导出。<br>拉取 GitHub 仓库和自动备份。<br>内置 HTTPS+CDN 文件存储。<br>支持生成导出静态站点，用于发布 GitHub Pages。</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
